// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: Ih5PzV0mN0gk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import UserteamNavbar from "../../UserteamNavbar"; // plasmic-import: P-uBnHr89-in/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import AvatarPlayerShowScore from "../../AvatarPlayerShowScore"; // plasmic-import: kJWqOT85FINq/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: xodLqMOhDs29/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicShowTeam.module.css"; // plasmic-import: Ih5PzV0mN0gk/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicShowTeam__VariantMembers = {};
export type PlasmicShowTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowTeam__VariantsArgs;
export const PlasmicShowTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicShowTeam__ArgsType = {};
type ArgPropType = keyof PlasmicShowTeam__ArgsType;
export const PlasmicShowTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicShowTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  userteamNavbar?: Flex__<typeof UserteamNavbar>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabButton?: Flex__<typeof TabButton>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  button?: Flex__<typeof Button>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  tabContent?: Flex__<typeof TabContent>;
  columns?: Flex__<"div">;
  goa?: Flex__<"div">;
  def?: Flex__<"div">;
  mid?: Flex__<"div">;
  str?: Flex__<"div">;
  soccerPlaceMens2?: Flex__<typeof SoccerPlaceMens2>;
  h3?: Flex__<"h3">;
};

export interface DefaultShowTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShowTeam__RenderFunc(props: {
  variants: PlasmicShowTeam__VariantsArgs;
  args: PlasmicShowTeam__ArgsType;
  overrides: PlasmicShowTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "tourId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.toursList.data.response[0].tour_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "d0370e4f-f034-4466-b113-40a51e5ca835",
        userArgs: {
          params: [$ctx.params.id, $state.userId, $ctx.params.comp_id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.d0370e4f-f034-4466-b113-40a51e5ca835.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    toursList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "9e883f9d-830e-4715-b03a-2462185d5090",
        userArgs: {
          params: [
            $queries.query.data.response[0].competition_id,
            $queries.query.data.response[0].id
          ]
        },
        cacheKey: `plasmic.$.9e883f9d-830e-4715-b03a-2462185d5090.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    userTeam: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "193142c4-1d62-4cdb-a0db-ca0b653ef78d",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.193142c4-1d62-4cdb-a0db-ca0b653ef78d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "3a9f74e8-7624-42d9-8d1c-464b195bf62a",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.3a9f74e8-7624-42d9-8d1c-464b195bf62a.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "b2053019-9d88-4660-8813-ce7b57524fc8",
        userArgs: {
          params: [$state.tourId]
        },
        cacheKey: `plasmic.$.b2053019-9d88-4660-8813-ce7b57524fc8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    teamPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "5a3eb4da-d85b-4560-b23e-f862ee58af48",
        userArgs: {
          params: [$queries.query.data.response[0].id, $state.tourId]
        },
        cacheKey: `plasmic.$.5a3eb4da-d85b-4560-b23e-f862ee58af48.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    everyplayerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "d9cbe18a-dded-4c65-954f-affd7818da36",
        userArgs: {},
        cacheKey: `plasmic.$.d9cbe18a-dded-4c65-954f-affd7818da36.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <UserteamNavbar
            data-plasmic-name={"userteamNavbar"}
            data-plasmic-override={overrides.userteamNavbar}
            className={classNames("__wab_instance", sty.userteamNavbar)}
            onlickEditTeam={async event => {
              const $steps = {};

              $steps["goToEditTeam"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/${(() => {
                        try {
                          return $queries.query.data.response[0].competition_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}/${(() => {
                        try {
                          return $queries.query.data.response[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEditTeam"] != null &&
                typeof $steps["goToEditTeam"] === "object" &&
                typeof $steps["goToEditTeam"].then === "function"
              ) {
                $steps["goToEditTeam"] = await $steps["goToEditTeam"];
              }
            }}
            teamBalance={(() => {
              try {
                return $queries.query.data.response[0].balance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 0;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ntysc)}>
            <TabsContainer
              data-plasmic-name={"tabsContainer"}
              data-plasmic-override={overrides.tabsContainer}
              className={classNames("__wab_instance", sty.tabsContainer)}
              initialKey={"tab0"}
              previewAll={false}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___6G0BW)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lhpSo)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $queries.toursList.data.response;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <TabButton
                            data-plasmic-name={"tabButton"}
                            data-plasmic-override={overrides.tabButton}
                            className={classNames(
                              "__wab_instance",
                              sty.tabButton
                            )}
                            key={currentIndex}
                            tabKey={(() => {
                              try {
                                return "tab" + currentIndex;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <PlasmicLink__
                              data-plasmic-name={"link"}
                              data-plasmic-override={overrides.link}
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link
                              )}
                              component={Link}
                              platform={"nextjs"}
                            >
                              <Button
                                data-plasmic-name={"button"}
                                data-plasmic-override={overrides.button}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["updateTourId"] =
                                    $queries.query.data.response[0].created_at <
                                    currentItem.tour_deadline
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["tourId"]
                                            },
                                            operation: 0,
                                            value: currentItem.tour_id
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateTourId"] != null &&
                                    typeof $steps["updateTourId"] ===
                                      "object" &&
                                    typeof $steps["updateTourId"].then ===
                                      "function"
                                  ) {
                                    $steps["updateTourId"] = await $steps[
                                      "updateTourId"
                                    ];
                                  }
                                }}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ooh9I
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__s9Tb
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.tour_name + "-tur";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Tab 1";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___0JByj
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return currentItem.tour_status;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </Button>
                            </PlasmicLink__>
                          </TabButton>
                        );
                      })}
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___818AW
                      )}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                        ? (_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.toursList.data.response;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <TabContent
                                data-plasmic-name={"tabContent"}
                                data-plasmic-override={overrides.tabContent}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabContent
                                )}
                                key={currentIndex}
                                tabKey={(() => {
                                  try {
                                    return "tab" + currentIndex;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  data-plasmic-name={"columns"}
                                  data-plasmic-override={overrides.columns}
                                  className={classNames(
                                    projectcss.all,
                                    sty.columns
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__xIzD8
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__hHx9J
                                      )}
                                    >
                                      <div
                                        data-plasmic-name={"goa"}
                                        data-plasmic-override={overrides.goa}
                                        className={classNames(
                                          projectcss.all,
                                          sty.goa
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.userTeam.data.response.filter(
                                                x => x.position === "GOA"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___9Rsg4
                                                )}
                                                key={currentIndex}
                                              >
                                                <AvatarPlayerShowScore
                                                  capitanVisibility={(() => {
                                                    try {
                                                      return (
                                                        currentItem.is_captain ===
                                                        true
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.avatarPlayerShowScore___1QvI
                                                  )}
                                                  image={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).image;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  name={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  ochko={(() => {
                                                    try {
                                                      return $queries.playerPoint.data.response.find(
                                                        x =>
                                                          x.player_id ===
                                                          currentItem.player_id
                                                      ).point;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"def"}
                                        data-plasmic-override={overrides.def}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.def
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.userTeam.data.response.filter(
                                                x => x.position === "DEF"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__vgv7L
                                                )}
                                                key={currentIndex}
                                              >
                                                <AvatarPlayerShowScore
                                                  capitanVisibility={(() => {
                                                    try {
                                                      return (
                                                        currentItem.is_captain ===
                                                        true
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.avatarPlayerShowScore__q4Dev
                                                  )}
                                                  image={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).image;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  name={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  ochko={(() => {
                                                    try {
                                                      return $queries.playerPoint.data.response.find(
                                                        x =>
                                                          x.player_id ===
                                                          currentItem.player_id
                                                      ).point;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </Stack__>
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"mid"}
                                        data-plasmic-override={overrides.mid}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.mid
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.userTeam.data.response.filter(
                                                x => x.position === "MID"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__vs9BU
                                                )}
                                                key={currentIndex}
                                              >
                                                <AvatarPlayerShowScore
                                                  capitanVisibility={(() => {
                                                    try {
                                                      return (
                                                        currentItem.is_captain ===
                                                        true
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.avatarPlayerShowScore__wpSmV
                                                  )}
                                                  image={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).image;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  name={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  ochko={(() => {
                                                    try {
                                                      return $queries.playerPoint.data.response.find(
                                                        x =>
                                                          x.player_id ===
                                                          currentItem.player_id
                                                      ).point;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </Stack__>
                                      <Stack__
                                        as={"div"}
                                        data-plasmic-name={"str"}
                                        data-plasmic-override={overrides.str}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.str
                                        )}
                                      >
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $queries.userTeam.data.response.filter(
                                                x => x.position === "STR"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_1,
                                            __plasmic_idx_1
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_1;
                                            const currentIndex =
                                              __plasmic_idx_1;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__myCbF
                                                )}
                                                key={currentIndex}
                                              >
                                                <AvatarPlayerShowScore
                                                  capitanVisibility={(() => {
                                                    try {
                                                      return (
                                                        currentItem.is_captain ===
                                                        true
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return false;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.avatarPlayerShowScore___5SAiB
                                                  )}
                                                  image={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).image;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  name={(() => {
                                                    try {
                                                      return $queries.playerList.data.response.find(
                                                        x =>
                                                          x.id ===
                                                          currentItem.player_id
                                                      ).name;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  ochko={(() => {
                                                    try {
                                                      return $queries.playerPoint.data.response.find(
                                                        x =>
                                                          x.player_id ===
                                                          currentItem.player_id
                                                      ).point;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                />
                                              </div>
                                            );
                                          }
                                        )}
                                      </Stack__>
                                      <SoccerPlaceMens2
                                        data-plasmic-name={"soccerPlaceMens2"}
                                        data-plasmic-override={
                                          overrides.soccerPlaceMens2
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.soccerPlaceMens2
                                        )}
                                      />
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.column__gIpSa
                                    )}
                                  >
                                    <h1
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h1,
                                        projectcss.__wab_text,
                                        sty.h1___7A61
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              currentItem.tour_name + "-Tur"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h1>
                                    <h3
                                      data-plasmic-name={"h3"}
                                      data-plasmic-override={overrides.h3}
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.h3,
                                        projectcss.__wab_text,
                                        sty.h3
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return undefined;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </h3>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___0XntJ
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rhbFd
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "Turdagi ochko";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <h1
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h1,
                                          projectcss.__wab_text,
                                          sty.h1__uFhKf
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $queries.teamPoint.data
                                                .response[0].point;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </h1>
                                    </Stack__>
                                  </div>
                                </div>
                              </TabContent>
                            );
                          })
                        : null}
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "userteamNavbar",
    "tabsContainer",
    "tabButton",
    "link",
    "button",
    "tabUnderline",
    "tabContent",
    "columns",
    "goa",
    "def",
    "mid",
    "str",
    "soccerPlaceMens2",
    "h3"
  ],
  navbar: ["navbar"],
  userteamNavbar: ["userteamNavbar"],
  tabsContainer: [
    "tabsContainer",
    "tabButton",
    "link",
    "button",
    "tabUnderline",
    "tabContent",
    "columns",
    "goa",
    "def",
    "mid",
    "str",
    "soccerPlaceMens2",
    "h3"
  ],
  tabButton: ["tabButton", "link", "button"],
  link: ["link", "button"],
  button: ["button"],
  tabUnderline: ["tabUnderline"],
  tabContent: [
    "tabContent",
    "columns",
    "goa",
    "def",
    "mid",
    "str",
    "soccerPlaceMens2",
    "h3"
  ],
  columns: ["columns", "goa", "def", "mid", "str", "soccerPlaceMens2", "h3"],
  goa: ["goa"],
  def: ["def"],
  mid: ["mid"],
  str: ["str"],
  soccerPlaceMens2: ["soccerPlaceMens2"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  userteamNavbar: typeof UserteamNavbar;
  tabsContainer: typeof TabsContainer;
  tabButton: typeof TabButton;
  link: "a";
  button: typeof Button;
  tabUnderline: typeof TabUnderline;
  tabContent: typeof TabContent;
  columns: "div";
  goa: "div";
  def: "div";
  mid: "div";
  str: "div";
  soccerPlaceMens2: typeof SoccerPlaceMens2;
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowTeam__VariantsArgs;
    args?: PlasmicShowTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShowTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShowTeam__ArgProps,
          internalVariantPropNames: PlasmicShowTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShowTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowTeam";
  } else {
    func.displayName = `PlasmicShowTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicShowTeam = Object.assign(
  // Top-level PlasmicShowTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    userteamNavbar: makeNodeComponent("userteamNavbar"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabButton: makeNodeComponent("tabButton"),
    link: makeNodeComponent("link"),
    button: makeNodeComponent("button"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    tabContent: makeNodeComponent("tabContent"),
    columns: makeNodeComponent("columns"),
    goa: makeNodeComponent("goa"),
    def: makeNodeComponent("def"),
    mid: makeNodeComponent("mid"),
    str: makeNodeComponent("str"),
    soccerPlaceMens2: makeNodeComponent("soccerPlaceMens2"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicShowTeam
    internalVariantProps: PlasmicShowTeam__VariantProps,
    internalArgProps: PlasmicShowTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShowTeam;
/* prettier-ignore-end */
