// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: Ih5PzV0mN0gk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import ShowteamNavbar from "../../ShowteamNavbar"; // plasmic-import: t1-8eQITFPkq/component
import UserteamNavbar from "../../UserteamNavbar"; // plasmic-import: P-uBnHr89-in/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import AvatarPlayerShowScore from "../../AvatarPlayerShowScore"; // plasmic-import: kJWqOT85FINq/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: xodLqMOhDs29/component
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: 4QnaRcOLXj0D/component
import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import PlayerPicker from "../../PlayerPicker"; // plasmic-import: FmVyQ1WB4e_T/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicShowTeam.module.css"; // plasmic-import: Ih5PzV0mN0gk/css

import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: TfB627kbYt5s/icon
import ChecksvgIcon2 from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BLgPkmgd4hOv/icon

createPlasmicElementProxy;

export type PlasmicShowTeam__VariantMembers = {};
export type PlasmicShowTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicShowTeam__VariantsArgs;
export const PlasmicShowTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicShowTeam__ArgsType = {};
type ArgPropType = keyof PlasmicShowTeam__ArgsType;
export const PlasmicShowTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicShowTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  showteamNavbar?: Flex__<typeof ShowteamNavbar>;
  userteamNavbar?: Flex__<typeof UserteamNavbar>;
  transferVisibility?: Flex__<"div">;
  showScore?: Flex__<"div">;
  goa?: Flex__<"div">;
  def?: Flex__<"div">;
  mid?: Flex__<"div">;
  str?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  transferTourVisibility?: Flex__<"div">;
  transferTour?: Flex__<"div">;
  goa2?: Flex__<"div">;
  def2?: Flex__<"div">;
  mid2?: Flex__<"div">;
  str2?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  paginationAll?: Flex__<typeof AntdPagination>;
  tabs?: Flex__<typeof AntdTabs>;
  tabItem?: Flex__<typeof AntdTabItem>;
  transferVisibility2?: Flex__<"div">;
  showScore2?: Flex__<"div">;
  goa3?: Flex__<"div">;
  def3?: Flex__<"div">;
  mid3?: Flex__<"div">;
  str3?: Flex__<"div">;
  transferTourVisibility2?: Flex__<"div">;
  transferTour2?: Flex__<"div">;
  goa4?: Flex__<"div">;
  def4?: Flex__<"div">;
  mid4?: Flex__<"div">;
  str4?: Flex__<"div">;
  textInput2?: Flex__<typeof TextInput>;
  paginationAll2?: Flex__<typeof AntdPagination>;
};

export interface DefaultShowTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicShowTeam__RenderFunc(props: {
  variants: PlasmicShowTeam__VariantsArgs;
  args: PlasmicShowTeam__ArgsType;
  overrides: PlasmicShowTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "userId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "tourId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.toursList.data.response[0].tour_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "textInput[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "paginationAll[].currentPage",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].pageSize",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].startIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "paginationAll[].endIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "transfer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "tourIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "tabs.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "textInput2[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "paginationAll2[].currentPage",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "paginationAll2[].pageSize",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "paginationAll2[].startIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "paginationAll2[].endIndex",
        type: "private",
        variableType: "number",

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "d0370e4f-f034-4466-b113-40a51e5ca835",
        userArgs: {
          params: [$ctx.params.id, $state.userId, $ctx.params.comp_id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.d0370e4f-f034-4466-b113-40a51e5ca835.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    toursList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "9e883f9d-830e-4715-b03a-2462185d5090",
        userArgs: {
          params: [
            $queries.query.data.response[0].competition_id,
            $queries.query.data.response[0].id
          ]
        },
        cacheKey: `plasmic.$.9e883f9d-830e-4715-b03a-2462185d5090.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "193142c4-1d62-4cdb-a0db-ca0b653ef78d",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.193142c4-1d62-4cdb-a0db-ca0b653ef78d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "3a9f74e8-7624-42d9-8d1c-464b195bf62a",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.3a9f74e8-7624-42d9-8d1c-464b195bf62a.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "b2053019-9d88-4660-8813-ce7b57524fc8",
        userArgs: {
          params: [$state.tourId]
        },
        cacheKey: `plasmic.$.b2053019-9d88-4660-8813-ce7b57524fc8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    teamPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "5a3eb4da-d85b-4560-b23e-f862ee58af48",
        userArgs: {
          params: [$queries.query.data.response[0].id, $state.tourId]
        },
        cacheKey: `plasmic.$.5a3eb4da-d85b-4560-b23e-f862ee58af48.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    everyplayerPoint: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "d9cbe18a-dded-4c65-954f-affd7818da36",
        userArgs: {},
        cacheKey: `plasmic.$.d9cbe18a-dded-4c65-954f-affd7818da36.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    playerListTab: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "8fd59fe6-48e2-47a2-8f56-5e96d8affc45",
        userArgs: {
          path: [
            $state.paginationAll[$state.tourIndex].pageSize,
            $state.paginationAll[$state.tourIndex].startIndex
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.8fd59fe6-48e2-47a2-8f56-5e96d8affc45.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    playerAllCount: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "ee9c91bb-efc0-4837-bf0a-dd14852b5dcc",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.ee9c91bb-efc0-4837-bf0a-dd14852b5dcc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <ShowteamNavbar
            data-plasmic-name={"showteamNavbar"}
            data-plasmic-override={overrides.showteamNavbar}
            className={classNames("__wab_instance", sty.showteamNavbar)}
          />

          <UserteamNavbar
            data-plasmic-name={"userteamNavbar"}
            data-plasmic-override={overrides.userteamNavbar}
            className={classNames("__wab_instance", sty.userteamNavbar)}
            onlickEditTeam={async event => {
              const $steps = {};

              $steps["goToEditTeam"] = true
                ? (() => {
                    const actionArgs = {
                      destination: `/${(() => {
                        try {
                          return $queries.query.data.response[0].competition_id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}/${(() => {
                        try {
                          return $queries.query.data.response[0].id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}`
                    };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToEditTeam"] != null &&
                typeof $steps["goToEditTeam"] === "object" &&
                typeof $steps["goToEditTeam"].then === "function"
              ) {
                $steps["goToEditTeam"] = await $steps["goToEditTeam"];
              }
            }}
            teamBalance={(() => {
              try {
                return $queries.query.data.response[0].balance;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return 0;
                }
                throw e;
              }
            })()}
          />

          <div className={classNames(projectcss.all, sty.freeBox__ntysc)}>
            {false ? (
              <TabsContainer
                className={classNames(
                  "__wab_instance",
                  sty.tabsContainer__ipPnb
                )}
                initialKey={"tab0"}
                mountMode={"mountAllEagerly"}
                previewAll={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6G0BW
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l36Eb
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lhpSo
                          )}
                        >
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.toursList.data.response;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <TabButton
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabButton__vSx4W
                                )}
                                key={currentIndex}
                                tabKey={(() => {
                                  try {
                                    return "tab" + currentIndex;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <PlasmicLink__
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.a,
                                    sty.link__pVx0
                                  )}
                                  component={Link}
                                  platform={"nextjs"}
                                >
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__mfxbi
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["updateTourId"] =
                                        $queries.query.data.response[0]
                                          .created_at <
                                        currentItem.tour_deadline
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["tourId"]
                                                },
                                                operation: 0,
                                                value: currentItem.tour_id
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateTourId"] != null &&
                                        typeof $steps["updateTourId"] ===
                                          "object" &&
                                        typeof $steps["updateTourId"].then ===
                                          "function"
                                      ) {
                                        $steps["updateTourId"] = await $steps[
                                          "updateTourId"
                                        ];
                                      }

                                      $steps["updateTourIndex"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["tourIndex"]
                                              },
                                              operation: 0,
                                              value: currentIndex
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateTourIndex"] != null &&
                                        typeof $steps["updateTourIndex"] ===
                                          "object" &&
                                        typeof $steps["updateTourIndex"]
                                          .then === "function"
                                      ) {
                                        $steps["updateTourIndex"] =
                                          await $steps["updateTourIndex"];
                                      }

                                      $steps["updateTransfer"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["transfer"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateTransfer"] != null &&
                                        typeof $steps["updateTransfer"] ===
                                          "object" &&
                                        typeof $steps["updateTransfer"].then ===
                                          "function"
                                      ) {
                                        $steps["updateTransfer"] = await $steps[
                                          "updateTransfer"
                                        ];
                                      }
                                    }}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ooh9I
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__s9Tb
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                currentItem.tour_name + "-tur"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "Tab 1";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___0JByj
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return currentItem.tour_status;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </Button>
                                </PlasmicLink__>
                              </TabButton>
                            );
                          })}
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___818AW
                        )}
                      >
                        {(() => {
                          try {
                            return true;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })()
                          ? (_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.toursList.data.response;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_0, __plasmic_idx_0) => {
                              const currentItem = __plasmic_item_0;
                              const currentIndex = __plasmic_idx_0;
                              return (
                                <TabContent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabContent__vgObu
                                  )}
                                  key={currentIndex}
                                  tabKey={(() => {
                                    try {
                                      return "tab" + currentIndex;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                >
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.tour_status ===
                                        "not_started"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Stack__
                                      as={"div"}
                                      data-plasmic-name={"transferVisibility"}
                                      data-plasmic-override={
                                        overrides.transferVisibility
                                      }
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.transferVisibility
                                      )}
                                    >
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link___82T4A
                                        )}
                                        component={Link}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateTransfer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["transfer"]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateTransfer"] != null &&
                                            typeof $steps["updateTransfer"] ===
                                              "object" &&
                                            typeof $steps["updateTransfer"]
                                              .then === "function"
                                          ) {
                                            $steps["updateTransfer"] =
                                              await $steps["updateTransfer"];
                                          }
                                        }}
                                        platform={"nextjs"}
                                      >
                                        {"Transfer"}
                                      </PlasmicLink__>
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          sty.link__a566
                                        )}
                                        component={Link}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updateTransfer"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: ["transfer"]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updateTransfer"] != null &&
                                            typeof $steps["updateTransfer"] ===
                                              "object" &&
                                            typeof $steps["updateTransfer"]
                                              .then === "function"
                                          ) {
                                            $steps["updateTransfer"] =
                                              await $steps["updateTransfer"];
                                          }
                                        }}
                                        platform={"nextjs"}
                                      >
                                        {"Ochko"}
                                      </PlasmicLink__>
                                    </Stack__>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return $state.transfer === true;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={"showScore"}
                                      data-plasmic-override={
                                        overrides.showScore
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.showScore
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__xIzD8
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__hHx9J
                                          )}
                                        >
                                          <div
                                            data-plasmic-name={"goa"}
                                            data-plasmic-override={
                                              overrides.goa
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              sty.goa
                                            )}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.filter(
                                                    x => x.position === "GOA"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_1,
                                                __plasmic_idx_1
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_1;
                                                const currentIndex =
                                                  __plasmic_idx_1;
                                                return (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox___9Rsg4
                                                    )}
                                                    key={currentIndex}
                                                  >
                                                    <AvatarPlayerShowScore
                                                      capitanVisibility={(() => {
                                                        try {
                                                          return (
                                                            currentItem.is_captain ===
                                                            true
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.avatarPlayerShowScore___1QvI
                                                      )}
                                                      image={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).image;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      name={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).name;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      ochko={(() => {
                                                        try {
                                                          return $queries.playerPoint.data.response.find(
                                                            x =>
                                                              x.player_id ===
                                                              currentItem.player_id
                                                          ).point;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    />
                                                  </div>
                                                );
                                              }
                                            )}
                                          </div>
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={"def"}
                                            data-plasmic-override={
                                              overrides.def
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.def
                                            )}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.filter(
                                                    x => x.position === "DEF"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_1,
                                                __plasmic_idx_1
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_1;
                                                const currentIndex =
                                                  __plasmic_idx_1;
                                                return (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__vgv7L
                                                    )}
                                                    key={currentIndex}
                                                  >
                                                    <AvatarPlayerShowScore
                                                      capitanVisibility={(() => {
                                                        try {
                                                          return (
                                                            currentItem.is_captain ===
                                                            true
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.avatarPlayerShowScore__q4Dev
                                                      )}
                                                      image={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).image;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      name={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).name;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      ochko={(() => {
                                                        try {
                                                          return $queries.playerPoint.data.response.find(
                                                            x =>
                                                              x.player_id ===
                                                              currentItem.player_id
                                                          ).point;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    />
                                                  </div>
                                                );
                                              }
                                            )}
                                          </Stack__>
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={"mid"}
                                            data-plasmic-override={
                                              overrides.mid
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.mid
                                            )}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.filter(
                                                    x => x.position === "MID"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_1,
                                                __plasmic_idx_1
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_1;
                                                const currentIndex =
                                                  __plasmic_idx_1;
                                                return (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__vs9BU
                                                    )}
                                                    key={currentIndex}
                                                  >
                                                    <AvatarPlayerShowScore
                                                      capitanVisibility={(() => {
                                                        try {
                                                          return (
                                                            currentItem.is_captain ===
                                                            true
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.avatarPlayerShowScore__wpSmV
                                                      )}
                                                      image={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).image;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      name={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).name;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      ochko={(() => {
                                                        try {
                                                          return $queries.playerPoint.data.response.find(
                                                            x =>
                                                              x.player_id ===
                                                              currentItem.player_id
                                                          ).point;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    />
                                                  </div>
                                                );
                                              }
                                            )}
                                          </Stack__>
                                          <Stack__
                                            as={"div"}
                                            data-plasmic-name={"str"}
                                            data-plasmic-override={
                                              overrides.str
                                            }
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.str
                                            )}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.teamPlayer.data.response.filter(
                                                    x => x.position === "STR"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_1,
                                                __plasmic_idx_1
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_1;
                                                const currentIndex =
                                                  __plasmic_idx_1;
                                                return (
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      sty.freeBox__myCbF
                                                    )}
                                                    key={currentIndex}
                                                  >
                                                    <AvatarPlayerShowScore
                                                      capitanVisibility={(() => {
                                                        try {
                                                          return (
                                                            currentItem.is_captain ===
                                                            true
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return false;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      className={classNames(
                                                        "__wab_instance",
                                                        sty.avatarPlayerShowScore___5SAiB
                                                      )}
                                                      image={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).image;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      name={(() => {
                                                        try {
                                                          return $queries.playerList.data.response.find(
                                                            x =>
                                                              x.id ===
                                                              currentItem.player_id
                                                          ).name;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                      ochko={(() => {
                                                        try {
                                                          return $queries.playerPoint.data.response.find(
                                                            x =>
                                                              x.player_id ===
                                                              currentItem.player_id
                                                          ).point;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    />
                                                  </div>
                                                );
                                              }
                                            )}
                                          </Stack__>
                                          <SoccerPlaceMens2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.soccerPlaceMens2__iEnMt
                                            )}
                                          />
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.column__gIpSa
                                        )}
                                      >
                                        <h1
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h1,
                                            projectcss.__wab_text,
                                            sty.h1___7A61
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  currentItem.tour_name + "-Tur"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h1>
                                        <h3
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.h3,
                                            projectcss.__wab_text,
                                            sty.h3__mnKLq
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return undefined;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </h3>
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___0XntJ
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__rhbFd
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return "Turdagi ochko";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                          <h1
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.h1,
                                              projectcss.__wab_text,
                                              sty.h1__uFhKf
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return $queries.teamPoint.data
                                                    .response[0].point;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </h1>
                                        </Stack__>
                                        <PlasmicImg__
                                          data-plasmic-name={"img"}
                                          data-plasmic-override={overrides.img}
                                          alt={""}
                                          className={classNames(sty.img)}
                                          displayHeight={"auto"}
                                          displayMaxHeight={"none"}
                                          displayMaxWidth={"100%"}
                                          displayMinHeight={"0"}
                                          displayMinWidth={"0"}
                                          displayWidth={"auto"}
                                          loading={"lazy"}
                                        />
                                      </div>
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        currentItem.tour_status ===
                                        "not_started"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      data-plasmic-name={
                                        "transferTourVisibility"
                                      }
                                      data-plasmic-override={
                                        overrides.transferTourVisibility
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.transferTourVisibility
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return $state.transfer === false;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          data-plasmic-name={"transferTour"}
                                          data-plasmic-override={
                                            overrides.transferTour
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.transferTour
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.column__us9UY
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___1JxBr
                                              )}
                                            >
                                              <div
                                                data-plasmic-name={"goa2"}
                                                data-plasmic-override={
                                                  overrides.goa2
                                                }
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.goa2
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries.teamPlayer.data.response.filter(
                                                        x =>
                                                          x.position === "GOA"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const currentItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__wUsht
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <AvatarPlayer
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.avatarPlayer__ytn7Q
                                                          )}
                                                        />
                                                      </div>
                                                    );
                                                  }
                                                )}
                                              </div>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"def2"}
                                                data-plasmic-override={
                                                  overrides.def2
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.def2
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries.teamPlayer.data.response.filter(
                                                        x =>
                                                          x.position === "DEF"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const currentItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__fSbUm
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <AvatarPlayer
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.avatarPlayer__lN6Tg
                                                          )}
                                                        />
                                                      </div>
                                                    );
                                                  }
                                                )}
                                              </Stack__>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"mid2"}
                                                data-plasmic-override={
                                                  overrides.mid2
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.mid2
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries.teamPlayer.data.response.filter(
                                                        x =>
                                                          x.position === "MID"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const currentItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__cPh70
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <AvatarPlayer
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.avatarPlayer__lkmY
                                                          )}
                                                        />
                                                      </div>
                                                    );
                                                  }
                                                )}
                                              </Stack__>
                                              <Stack__
                                                as={"div"}
                                                data-plasmic-name={"str2"}
                                                data-plasmic-override={
                                                  overrides.str2
                                                }
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.str2
                                                )}
                                              >
                                                {(_par =>
                                                  !_par
                                                    ? []
                                                    : Array.isArray(_par)
                                                    ? _par
                                                    : [_par])(
                                                  (() => {
                                                    try {
                                                      return $queries.teamPlayer.data.response.filter(
                                                        x =>
                                                          x.position === "STR"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ).map(
                                                  (
                                                    __plasmic_item_1,
                                                    __plasmic_idx_1
                                                  ) => {
                                                    const currentItem =
                                                      __plasmic_item_1;
                                                    const currentIndex =
                                                      __plasmic_idx_1;
                                                    return (
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__gmI1O
                                                        )}
                                                        key={currentIndex}
                                                      >
                                                        <AvatarPlayer
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.avatarPlayer___56WW
                                                          )}
                                                        />
                                                      </div>
                                                    );
                                                  }
                                                )}
                                              </Stack__>
                                              <SoccerPlaceMens2
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.soccerPlaceMens2__woCgD
                                                )}
                                              />
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.column__tuGEm
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__cou1M
                                              )}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.textInput
                                                  ),
                                                  color: "dark",
                                                  onChange: (...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "textInput",
                                                        __plasmic_idx_0,
                                                        "value"
                                                      ]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  },
                                                  placeholder:
                                                    "Ism bo'yicha izlash",
                                                  showStartIcon: true,
                                                  value:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "textInput",
                                                        __plasmic_idx_0,
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                };

                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "textInput[].value",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => ""
                                                    }
                                                  ],
                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <TextInput
                                                    data-plasmic-name={
                                                      "textInput"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.textInput
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                              <TabsContainer
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.tabsContainer__vXoZg
                                                )}
                                                initialKey={"tab1"}
                                              >
                                                <DataCtxReader__>
                                                  {$ctx => (
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.freeBox__prNwP
                                                      )}
                                                    >
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox__ucV4N
                                                        )}
                                                      >
                                                        <TabButton
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.tabButton__cGRhH
                                                          )}
                                                          tabKey={"tab1"}
                                                        >
                                                          <Button>
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__blM1
                                                              )}
                                                            >
                                                              {"Hammasi"}
                                                            </div>
                                                          </Button>
                                                        </TabButton>
                                                        <TabButton
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.tabButton__oDcAb
                                                          )}
                                                          tabKey={"tab2"}
                                                        >
                                                          <Button>
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__pNdUy
                                                              )}
                                                            >
                                                              {"Klublar"}
                                                            </div>
                                                          </Button>
                                                        </TabButton>
                                                        <TabUnderline
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.tabUnderline__fw6Me
                                                          )}
                                                        />
                                                      </div>
                                                      <div
                                                        className={classNames(
                                                          projectcss.all,
                                                          sty.freeBox___1TzcT
                                                        )}
                                                      >
                                                        <TabContent
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.tabContent__w5SIx
                                                          )}
                                                          tabKey={"tab1"}
                                                        >
                                                          <Stack__
                                                            as={"div"}
                                                            hasGap={true}
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__ijqyy
                                                            )}
                                                          >
                                                            {(_par =>
                                                              !_par
                                                                ? []
                                                                : Array.isArray(
                                                                    _par
                                                                  )
                                                                ? _par
                                                                : [_par])(
                                                              (() => {
                                                                try {
                                                                  return $queries
                                                                    .playerListTab
                                                                    .data
                                                                    .response;
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return [];
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ).map(
                                                              (
                                                                __plasmic_item_1,
                                                                __plasmic_idx_1
                                                              ) => {
                                                                const currentItem =
                                                                  __plasmic_item_1;
                                                                const currentIndex =
                                                                  __plasmic_idx_1;
                                                                return (
                                                                  <PlayerPicker
                                                                    buttonVisibility={(() => {
                                                                      try {
                                                                        return $queries.teamPlayer.data.response.find(
                                                                          x =>
                                                                            x.player_id ===
                                                                            currentItem.id
                                                                        );
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    checkPlayer={(() => {
                                                                      try {
                                                                        return $queries.teamPlayer.data.response
                                                                          .filter(
                                                                            x =>
                                                                              x.sold !=
                                                                              true
                                                                          )
                                                                          .find(
                                                                            x =>
                                                                              x.player_id ===
                                                                              currentItem.id
                                                                          );
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    className={classNames(
                                                                      "__wab_instance",
                                                                      sty.playerPicker__ifgQ
                                                                    )}
                                                                    key={
                                                                      currentIndex
                                                                    }
                                                                    name={(() => {
                                                                      try {
                                                                        return currentItem.name;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    playerClubCount={(() => {
                                                                      try {
                                                                        return $queries.teamPlayer.data.response.filter(
                                                                          x =>
                                                                            x.club_id ===
                                                                            currentItem.club_id
                                                                        )
                                                                          .length;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return 4;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    playerPrice={(() => {
                                                                      try {
                                                                        return currentItem.price;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    point={(() => {
                                                                      try {
                                                                        return currentItem.ochko;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return 88;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    position={(() => {
                                                                      try {
                                                                        return currentItem.position;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    price={(() => {
                                                                      try {
                                                                        return currentItem.price;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return 9;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                    teamBalance={(() => {
                                                                      try {
                                                                        return $queries
                                                                          .query
                                                                          .data
                                                                          .response[0]
                                                                          .balance;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return 100;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()}
                                                                  />
                                                                );
                                                              }
                                                            )}
                                                            {(() => {
                                                              const child$Props =
                                                                {
                                                                  className:
                                                                    classNames(
                                                                      "__wab_instance",
                                                                      sty.paginationAll
                                                                    ),
                                                                  current:
                                                                    generateStateValueProp(
                                                                      $state,
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "currentPage"
                                                                      ]
                                                                    ),
                                                                  defaultCurrent: 1,
                                                                  defaultPageSize: 6,
                                                                  onChange:
                                                                    async (
                                                                      ...eventArgs: any
                                                                    ) => {
                                                                      generateStateOnChangePropForCodeComponents(
                                                                        $state,
                                                                        "currentPage",
                                                                        [
                                                                          "paginationAll",
                                                                          __plasmic_idx_0,
                                                                          "currentPage"
                                                                        ],
                                                                        AntdPagination_Helpers
                                                                      ).apply(
                                                                        null,
                                                                        eventArgs
                                                                      );
                                                                      generateStateOnChangePropForCodeComponents(
                                                                        $state,
                                                                        "startIndex",
                                                                        [
                                                                          "paginationAll",
                                                                          __plasmic_idx_0,
                                                                          "startIndex"
                                                                        ],
                                                                        AntdPagination_Helpers
                                                                      ).apply(
                                                                        null,
                                                                        eventArgs
                                                                      );
                                                                      generateStateOnChangePropForCodeComponents(
                                                                        $state,
                                                                        "endIndex",
                                                                        [
                                                                          "paginationAll",
                                                                          __plasmic_idx_0,
                                                                          "endIndex"
                                                                        ],
                                                                        AntdPagination_Helpers
                                                                      ).apply(
                                                                        null,
                                                                        eventArgs
                                                                      );
                                                                    },
                                                                  onShowSizeChange:
                                                                    generateStateOnChangePropForCodeComponents(
                                                                      $state,
                                                                      "pageSize",
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "pageSize"
                                                                      ],
                                                                      AntdPagination_Helpers
                                                                    ),
                                                                  pageSize:
                                                                    generateStateValueProp(
                                                                      $state,
                                                                      [
                                                                        "paginationAll",
                                                                        __plasmic_idx_0,
                                                                        "pageSize"
                                                                      ]
                                                                    ),
                                                                  pageSizeOptions:
                                                                    [
                                                                      {
                                                                        pageSize: 10
                                                                      },
                                                                      {
                                                                        pageSize: 20
                                                                      },
                                                                      {
                                                                        pageSize: 50
                                                                      },
                                                                      {
                                                                        pageSize: 100
                                                                      }
                                                                    ],
                                                                  total:
                                                                    (() => {
                                                                      try {
                                                                        return $queries
                                                                          .playerAllCount
                                                                          .data
                                                                          .response
                                                                          .length;
                                                                      } catch (e) {
                                                                        if (
                                                                          e instanceof
                                                                            TypeError ||
                                                                          e?.plasmicType ===
                                                                            "PlasmicUndefinedDataError"
                                                                        ) {
                                                                          return undefined;
                                                                        }
                                                                        throw e;
                                                                      }
                                                                    })()
                                                                };
                                                              initializeCodeComponentStates(
                                                                $state,
                                                                [
                                                                  {
                                                                    name: "currentPage",
                                                                    plasmicStateName:
                                                                      "paginationAll[].currentPage"
                                                                  },
                                                                  {
                                                                    name: "pageSize",
                                                                    plasmicStateName:
                                                                      "paginationAll[].pageSize"
                                                                  },
                                                                  {
                                                                    name: "startIndex",
                                                                    plasmicStateName:
                                                                      "paginationAll[].startIndex"
                                                                  },
                                                                  {
                                                                    name: "endIndex",
                                                                    plasmicStateName:
                                                                      "paginationAll[].endIndex"
                                                                  }
                                                                ],
                                                                [
                                                                  __plasmic_idx_0
                                                                ],
                                                                AntdPagination_Helpers ??
                                                                  {},
                                                                child$Props
                                                              );
                                                              initializePlasmicStates(
                                                                $state,
                                                                [
                                                                  {
                                                                    name: "paginationAll[].currentPage",
                                                                    initFunc: ({
                                                                      $props,
                                                                      $state,
                                                                      $queries
                                                                    }) => 1
                                                                  },
                                                                  {
                                                                    name: "paginationAll[].pageSize",
                                                                    initFunc: ({
                                                                      $props,
                                                                      $state,
                                                                      $queries
                                                                    }) => 6
                                                                  }
                                                                ],
                                                                [
                                                                  __plasmic_idx_0
                                                                ]
                                                              );
                                                              return (
                                                                <AntdPagination
                                                                  data-plasmic-name={
                                                                    "paginationAll"
                                                                  }
                                                                  data-plasmic-override={
                                                                    overrides.paginationAll
                                                                  }
                                                                  {...child$Props}
                                                                />
                                                              );
                                                            })()}
                                                          </Stack__>
                                                        </TabContent>
                                                        <TabContent
                                                          className={classNames(
                                                            "__wab_instance",
                                                            sty.tabContent__nWjD3
                                                          )}
                                                          tabKey={"tab2"}
                                                        >
                                                          <div
                                                            className={classNames(
                                                              projectcss.all,
                                                              sty.freeBox__zPnfR
                                                            )}
                                                          >
                                                            <div
                                                              className={classNames(
                                                                projectcss.all,
                                                                projectcss.__wab_text,
                                                                sty.text__uyV69
                                                              )}
                                                            >
                                                              {
                                                                "Some content for tab 2"
                                                              }
                                                            </div>
                                                          </div>
                                                        </TabContent>
                                                      </div>
                                                    </div>
                                                  )}
                                                </DataCtxReader__>
                                              </TabsContainer>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                    </div>
                                  ) : null}
                                </TabContent>
                              );
                            })
                          : null}
                      </div>
                    </div>
                  )}
                </DataCtxReader__>
              </TabsContainer>
            ) : null}
          </div>
          <AntdTabs
            data-plasmic-name={"tabs"}
            data-plasmic-override={overrides.tabs}
            activeKey={generateStateValueProp($state, ["tabs", "activeKey"])}
            animateTabBar={true}
            animateTabContent={false}
            animated={true}
            className={classNames("__wab_instance", sty.tabs)}
            items={(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.toursList.data.response;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <AntdTabItem
                  data-plasmic-name={"tabItem"}
                  data-plasmic-override={overrides.tabItem}
                  className={classNames("__wab_instance", sty.tabItem)}
                  key={"1"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aBkSq
                      )}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateTourId"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["tourId"]
                                },
                                operation: 0,
                                value: currentItem.tour_id
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateTourId"] != null &&
                          typeof $steps["updateTourId"] === "object" &&
                          typeof $steps["updateTourId"].then === "function"
                        ) {
                          $steps["updateTourId"] = await $steps["updateTourId"];
                        }
                      }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.tour_name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "First Item";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  }
                >
                  {(() => {
                    try {
                      return currentItem.tour_status === "not_started";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"transferVisibility2"}
                      data-plasmic-override={overrides.transferVisibility2}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.transferVisibility2
                      )}
                    >
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__bhKho
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTransfer"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["transfer"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTransfer"] != null &&
                            typeof $steps["updateTransfer"] === "object" &&
                            typeof $steps["updateTransfer"].then === "function"
                          ) {
                            $steps["updateTransfer"] = await $steps[
                              "updateTransfer"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      >
                        {"Transfer"}
                      </PlasmicLink__>
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__x1Eq4
                        )}
                        component={Link}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateTransfer"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["transfer"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateTransfer"] != null &&
                            typeof $steps["updateTransfer"] === "object" &&
                            typeof $steps["updateTransfer"].then === "function"
                          ) {
                            $steps["updateTransfer"] = await $steps[
                              "updateTransfer"
                            ];
                          }
                        }}
                        platform={"nextjs"}
                      >
                        {"Ochko"}
                      </PlasmicLink__>
                    </Stack__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.transfer === true;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"showScore2"}
                      data-plasmic-override={overrides.showScore2}
                      className={classNames(projectcss.all, sty.showScore2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__rQixC
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__r7MTp
                          )}
                        >
                          <div
                            data-plasmic-name={"goa3"}
                            data-plasmic-override={overrides.goa3}
                            className={classNames(projectcss.all, sty.goa3)}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.teamPlayer.data.response.filter(
                                    x => x.position === "GOA"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__r4T3
                                  )}
                                  key={currentIndex}
                                >
                                  <AvatarPlayerShowScore
                                    capitanVisibility={(() => {
                                      try {
                                        return currentItem.is_captain === true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.avatarPlayerShowScore___9TZy
                                    )}
                                    image={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    name={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    ochko={(() => {
                                      try {
                                        return $queries.playerPoint.data.response.find(
                                          x =>
                                            x.player_id ===
                                            currentItem.player_id
                                        ).point;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </div>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"def3"}
                            data-plasmic-override={overrides.def3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.def3)}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.teamPlayer.data.response.filter(
                                    x => x.position === "DEF"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iKrC7
                                  )}
                                  key={currentIndex}
                                >
                                  <AvatarPlayerShowScore
                                    capitanVisibility={(() => {
                                      try {
                                        return currentItem.is_captain === true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.avatarPlayerShowScore___9DmF
                                    )}
                                    image={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    name={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    ochko={(() => {
                                      try {
                                        return $queries.playerPoint.data.response.find(
                                          x =>
                                            x.player_id ===
                                            currentItem.player_id
                                        ).point;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"mid3"}
                            data-plasmic-override={overrides.mid3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.mid3)}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.teamPlayer.data.response.filter(
                                    x => x.position === "MID"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uq8La
                                  )}
                                  key={currentIndex}
                                >
                                  <AvatarPlayerShowScore
                                    capitanVisibility={(() => {
                                      try {
                                        return currentItem.is_captain === true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.avatarPlayerShowScore__yGx5U
                                    )}
                                    image={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    name={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    ochko={(() => {
                                      try {
                                        return $queries.playerPoint.data.response.find(
                                          x =>
                                            x.player_id ===
                                            currentItem.player_id
                                        ).point;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </Stack__>
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"str3"}
                            data-plasmic-override={overrides.str3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.str3)}
                          >
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $queries.teamPlayer.data.response.filter(
                                    x => x.position === "STR"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ta52D
                                  )}
                                  key={currentIndex}
                                >
                                  <AvatarPlayerShowScore
                                    capitanVisibility={(() => {
                                      try {
                                        return currentItem.is_captain === true;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return false;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.avatarPlayerShowScore__e460J
                                    )}
                                    image={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).image;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    name={(() => {
                                      try {
                                        return $queries.playerList.data.response.find(
                                          x => x.id === currentItem.player_id
                                        ).name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                    ochko={(() => {
                                      try {
                                        return $queries.playerPoint.data.response.find(
                                          x =>
                                            x.player_id ===
                                            currentItem.player_id
                                        ).point;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()}
                                  />
                                </div>
                              );
                            })}
                          </Stack__>
                          <SoccerPlaceMens2
                            className={classNames(
                              "__wab_instance",
                              sty.soccerPlaceMens2__c2WgQ
                            )}
                          />
                        </div>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___0Rw0E
                        )}
                      >
                        <h1
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.h1__pBwW1
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.tour_name + "-Tur";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h1>
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__mGoDt
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return undefined;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </h3>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iwBE
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__q9Nka
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "Turdagi ochko";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <h1
                            className={classNames(
                              projectcss.all,
                              projectcss.h1,
                              projectcss.__wab_text,
                              sty.h1__bRUn
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $queries.teamPoint.data.response[0]
                                    .point;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </h1>
                        </Stack__>
                      </div>
                    </div>
                  ) : null}
                  {(() => {
                    try {
                      return currentItem.tour_status === "not_started";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      data-plasmic-name={"transferTourVisibility2"}
                      data-plasmic-override={overrides.transferTourVisibility2}
                      className={classNames(
                        projectcss.all,
                        sty.transferTourVisibility2
                      )}
                    >
                      {(() => {
                        try {
                          return $state.transfer === false;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"transferTour2"}
                          data-plasmic-override={overrides.transferTour2}
                          className={classNames(
                            projectcss.all,
                            sty.transferTour2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__rnYlx
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___39FBy
                              )}
                            >
                              <div
                                data-plasmic-name={"goa4"}
                                data-plasmic-override={overrides.goa4}
                                className={classNames(projectcss.all, sty.goa4)}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.teamPlayer.data.response.filter(
                                        x => x.position === "GOA"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__zvUqh
                                      )}
                                      key={currentIndex}
                                    >
                                      <AvatarPlayer
                                        className={classNames(
                                          "__wab_instance",
                                          sty.avatarPlayer__jdhIg
                                        )}
                                      />
                                    </div>
                                  );
                                })}
                              </div>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"def4"}
                                data-plasmic-override={overrides.def4}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.def4)}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.teamPlayer.data.response.filter(
                                        x => x.position === "DEF"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__azvr8
                                      )}
                                      key={currentIndex}
                                    >
                                      <AvatarPlayer
                                        className={classNames(
                                          "__wab_instance",
                                          sty.avatarPlayer__vzKq
                                        )}
                                      />
                                    </div>
                                  );
                                })}
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"mid4"}
                                data-plasmic-override={overrides.mid4}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.mid4)}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.teamPlayer.data.response.filter(
                                        x => x.position === "MID"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__rs2KB
                                      )}
                                      key={currentIndex}
                                    >
                                      <AvatarPlayer
                                        className={classNames(
                                          "__wab_instance",
                                          sty.avatarPlayer__cgwwS
                                        )}
                                      />
                                    </div>
                                  );
                                })}
                              </Stack__>
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"str4"}
                                data-plasmic-override={overrides.str4}
                                hasGap={true}
                                className={classNames(projectcss.all, sty.str4)}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.teamPlayer.data.response.filter(
                                        x => x.position === "STR"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__pbkTj
                                      )}
                                      key={currentIndex}
                                    >
                                      <AvatarPlayer
                                        className={classNames(
                                          "__wab_instance",
                                          sty.avatarPlayer___5IkO
                                        )}
                                      />
                                    </div>
                                  );
                                })}
                              </Stack__>
                              <SoccerPlaceMens2
                                className={classNames(
                                  "__wab_instance",
                                  sty.soccerPlaceMens2__azYpl
                                )}
                              />
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___7X939
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tRPbN
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    "__wab_instance",
                                    sty.textInput2
                                  ),
                                  color: "dark",
                                  onChange: (...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "textInput2",
                                      __plasmic_idx_0,
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  },
                                  placeholder: "Ism bo'yicha izlash",
                                  showStartIcon: true,
                                  value:
                                    generateStateValueProp($state, [
                                      "textInput2",
                                      __plasmic_idx_0,
                                      "value"
                                    ]) ?? ""
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "textInput2[].value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => ""
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <TextInput
                                    data-plasmic-name={"textInput2"}
                                    data-plasmic-override={overrides.textInput2}
                                    {...child$Props}
                                  />
                                );
                              })()}
                              <TabsContainer
                                className={classNames(
                                  "__wab_instance",
                                  sty.tabsContainer__ygJji
                                )}
                                initialKey={"tab1"}
                              >
                                <DataCtxReader__>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__aEKz
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__bxWyv
                                        )}
                                      >
                                        <TabButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabButton__vwDx
                                          )}
                                          tabKey={"tab1"}
                                        >
                                          <Button>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__tkAak
                                              )}
                                            >
                                              {"Hammasi"}
                                            </div>
                                          </Button>
                                        </TabButton>
                                        <TabButton
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabButton__w7J8R
                                          )}
                                          tabKey={"tab2"}
                                        >
                                          <Button>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__j3Zrs
                                              )}
                                            >
                                              {"Klublar"}
                                            </div>
                                          </Button>
                                        </TabButton>
                                        <TabUnderline
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabUnderline___5X6Be
                                          )}
                                        />
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__eZxxE
                                        )}
                                      >
                                        <TabContent
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabContent___0Qhz7
                                          )}
                                          tabKey={"tab1"}
                                        >
                                          <Stack__
                                            as={"div"}
                                            hasGap={true}
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__sd5Pe
                                            )}
                                          >
                                            {(_par =>
                                              !_par
                                                ? []
                                                : Array.isArray(_par)
                                                ? _par
                                                : [_par])(
                                              (() => {
                                                try {
                                                  return $queries.playerListTab
                                                    .data.response;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return [];
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ).map(
                                              (
                                                __plasmic_item_1,
                                                __plasmic_idx_1
                                              ) => {
                                                const currentItem =
                                                  __plasmic_item_1;
                                                const currentIndex =
                                                  __plasmic_idx_1;
                                                return (
                                                  <PlayerPicker
                                                    buttonVisibility={(() => {
                                                      try {
                                                        return $queries.teamPlayer.data.response.find(
                                                          x =>
                                                            x.player_id ===
                                                            currentItem.id
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    checkPlayer={(() => {
                                                      try {
                                                        return $queries.teamPlayer.data.response
                                                          .filter(
                                                            x => x.sold != true
                                                          )
                                                          .find(
                                                            x =>
                                                              x.player_id ===
                                                              currentItem.id
                                                          );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.playerPicker___7Re22
                                                    )}
                                                    key={currentIndex}
                                                    name={(() => {
                                                      try {
                                                        return currentItem.name;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    playerClubCount={(() => {
                                                      try {
                                                        return $queries.teamPlayer.data.response.filter(
                                                          x =>
                                                            x.club_id ===
                                                            currentItem.club_id
                                                        ).length;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return 4;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    playerPrice={(() => {
                                                      try {
                                                        return currentItem.price;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    point={(() => {
                                                      try {
                                                        return currentItem.ochko;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return 88;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    position={(() => {
                                                      try {
                                                        return currentItem.position;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    price={(() => {
                                                      try {
                                                        return currentItem.price;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return 9;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                    teamBalance={(() => {
                                                      try {
                                                        return $queries.query
                                                          .data.response[0]
                                                          .balance;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return 100;
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  />
                                                );
                                              }
                                            )}
                                            {(() => {
                                              const child$Props = {
                                                className: classNames(
                                                  "__wab_instance",
                                                  sty.paginationAll2
                                                ),
                                                current: generateStateValueProp(
                                                  $state,
                                                  [
                                                    "paginationAll2",
                                                    __plasmic_idx_0,
                                                    "currentPage"
                                                  ]
                                                ),
                                                defaultCurrent: 1,
                                                defaultPageSize: 6,
                                                onChange: async (
                                                  ...eventArgs: any
                                                ) => {
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "currentPage",
                                                    [
                                                      "paginationAll2",
                                                      __plasmic_idx_0,
                                                      "currentPage"
                                                    ],
                                                    AntdPagination_Helpers
                                                  ).apply(null, eventArgs);
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "startIndex",
                                                    [
                                                      "paginationAll2",
                                                      __plasmic_idx_0,
                                                      "startIndex"
                                                    ],
                                                    AntdPagination_Helpers
                                                  ).apply(null, eventArgs);
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "endIndex",
                                                    [
                                                      "paginationAll2",
                                                      __plasmic_idx_0,
                                                      "endIndex"
                                                    ],
                                                    AntdPagination_Helpers
                                                  ).apply(null, eventArgs);
                                                },
                                                onShowSizeChange:
                                                  generateStateOnChangePropForCodeComponents(
                                                    $state,
                                                    "pageSize",
                                                    [
                                                      "paginationAll2",
                                                      __plasmic_idx_0,
                                                      "pageSize"
                                                    ],
                                                    AntdPagination_Helpers
                                                  ),
                                                pageSize:
                                                  generateStateValueProp(
                                                    $state,
                                                    [
                                                      "paginationAll2",
                                                      __plasmic_idx_0,
                                                      "pageSize"
                                                    ]
                                                  ),
                                                pageSizeOptions: [
                                                  { pageSize: 10 },
                                                  { pageSize: 20 },
                                                  { pageSize: 50 },
                                                  { pageSize: 100 }
                                                ],
                                                showSizeChanger: false,
                                                total: (() => {
                                                  try {
                                                    return $queries
                                                      .playerAllCount.data
                                                      .response.length;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              };
                                              initializeCodeComponentStates(
                                                $state,
                                                [
                                                  {
                                                    name: "currentPage",
                                                    plasmicStateName:
                                                      "paginationAll2[].currentPage"
                                                  },
                                                  {
                                                    name: "pageSize",
                                                    plasmicStateName:
                                                      "paginationAll2[].pageSize"
                                                  },
                                                  {
                                                    name: "startIndex",
                                                    plasmicStateName:
                                                      "paginationAll2[].startIndex"
                                                  },
                                                  {
                                                    name: "endIndex",
                                                    plasmicStateName:
                                                      "paginationAll2[].endIndex"
                                                  }
                                                ],
                                                [__plasmic_idx_0],
                                                AntdPagination_Helpers ?? {},
                                                child$Props
                                              );
                                              initializePlasmicStates(
                                                $state,
                                                [
                                                  {
                                                    name: "paginationAll2[].currentPage",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => 1
                                                  },
                                                  {
                                                    name: "paginationAll2[].pageSize",
                                                    initFunc: ({
                                                      $props,
                                                      $state,
                                                      $queries
                                                    }) => 6
                                                  }
                                                ],
                                                [__plasmic_idx_0]
                                              );
                                              return (
                                                <AntdPagination
                                                  data-plasmic-name={
                                                    "paginationAll2"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.paginationAll2
                                                  }
                                                  {...child$Props}
                                                />
                                              );
                                            })()}
                                          </Stack__>
                                        </TabContent>
                                        <TabContent
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabContent__nq056
                                          )}
                                          tabKey={"tab2"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__o1Lo5
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__ahHkE
                                              )}
                                            >
                                              {"Some content for tab 2"}
                                            </div>
                                          </div>
                                        </TabContent>
                                      </div>
                                    </div>
                                  )}
                                </DataCtxReader__>
                              </TabsContainer>
                            </div>
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </AntdTabItem>
              );
            })}
            onChange={generateStateOnChangeProp($state, ["tabs", "activeKey"])}
            sticky={false}
            tabBarBackground={"#FFF"}
            tabsDropdownScopeClassName={sty["tabs__tabsDropdown"]}
            tabsScopeClassName={sty["tabs__tabs"]}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "showteamNavbar",
    "userteamNavbar",
    "transferVisibility",
    "showScore",
    "goa",
    "def",
    "mid",
    "str",
    "img",
    "transferTourVisibility",
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "paginationAll",
    "tabs",
    "tabItem",
    "transferVisibility2",
    "showScore2",
    "goa3",
    "def3",
    "mid3",
    "str3",
    "transferTourVisibility2",
    "transferTour2",
    "goa4",
    "def4",
    "mid4",
    "str4",
    "textInput2",
    "paginationAll2"
  ],
  navbar: ["navbar"],
  showteamNavbar: ["showteamNavbar"],
  userteamNavbar: ["userteamNavbar"],
  transferVisibility: ["transferVisibility"],
  showScore: ["showScore", "goa", "def", "mid", "str", "img"],
  goa: ["goa"],
  def: ["def"],
  mid: ["mid"],
  str: ["str"],
  img: ["img"],
  transferTourVisibility: [
    "transferTourVisibility",
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "paginationAll"
  ],
  transferTour: [
    "transferTour",
    "goa2",
    "def2",
    "mid2",
    "str2",
    "textInput",
    "paginationAll"
  ],
  goa2: ["goa2"],
  def2: ["def2"],
  mid2: ["mid2"],
  str2: ["str2"],
  textInput: ["textInput"],
  paginationAll: ["paginationAll"],
  tabs: [
    "tabs",
    "tabItem",
    "transferVisibility2",
    "showScore2",
    "goa3",
    "def3",
    "mid3",
    "str3",
    "transferTourVisibility2",
    "transferTour2",
    "goa4",
    "def4",
    "mid4",
    "str4",
    "textInput2",
    "paginationAll2"
  ],
  tabItem: [
    "tabItem",
    "transferVisibility2",
    "showScore2",
    "goa3",
    "def3",
    "mid3",
    "str3",
    "transferTourVisibility2",
    "transferTour2",
    "goa4",
    "def4",
    "mid4",
    "str4",
    "textInput2",
    "paginationAll2"
  ],
  transferVisibility2: ["transferVisibility2"],
  showScore2: ["showScore2", "goa3", "def3", "mid3", "str3"],
  goa3: ["goa3"],
  def3: ["def3"],
  mid3: ["mid3"],
  str3: ["str3"],
  transferTourVisibility2: [
    "transferTourVisibility2",
    "transferTour2",
    "goa4",
    "def4",
    "mid4",
    "str4",
    "textInput2",
    "paginationAll2"
  ],
  transferTour2: [
    "transferTour2",
    "goa4",
    "def4",
    "mid4",
    "str4",
    "textInput2",
    "paginationAll2"
  ],
  goa4: ["goa4"],
  def4: ["def4"],
  mid4: ["mid4"],
  str4: ["str4"],
  textInput2: ["textInput2"],
  paginationAll2: ["paginationAll2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  showteamNavbar: typeof ShowteamNavbar;
  userteamNavbar: typeof UserteamNavbar;
  transferVisibility: "div";
  showScore: "div";
  goa: "div";
  def: "div";
  mid: "div";
  str: "div";
  img: typeof PlasmicImg__;
  transferTourVisibility: "div";
  transferTour: "div";
  goa2: "div";
  def2: "div";
  mid2: "div";
  str2: "div";
  textInput: typeof TextInput;
  paginationAll: typeof AntdPagination;
  tabs: typeof AntdTabs;
  tabItem: typeof AntdTabItem;
  transferVisibility2: "div";
  showScore2: "div";
  goa3: "div";
  def3: "div";
  mid3: "div";
  str3: "div";
  transferTourVisibility2: "div";
  transferTour2: "div";
  goa4: "div";
  def4: "div";
  mid4: "div";
  str4: "div";
  textInput2: typeof TextInput;
  paginationAll2: typeof AntdPagination;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShowTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShowTeam__VariantsArgs;
    args?: PlasmicShowTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShowTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicShowTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicShowTeam__ArgProps,
          internalVariantPropNames: PlasmicShowTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicShowTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShowTeam";
  } else {
    func.displayName = `PlasmicShowTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicShowTeam = Object.assign(
  // Top-level PlasmicShowTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    showteamNavbar: makeNodeComponent("showteamNavbar"),
    userteamNavbar: makeNodeComponent("userteamNavbar"),
    transferVisibility: makeNodeComponent("transferVisibility"),
    showScore: makeNodeComponent("showScore"),
    goa: makeNodeComponent("goa"),
    def: makeNodeComponent("def"),
    mid: makeNodeComponent("mid"),
    str: makeNodeComponent("str"),
    img: makeNodeComponent("img"),
    transferTourVisibility: makeNodeComponent("transferTourVisibility"),
    transferTour: makeNodeComponent("transferTour"),
    goa2: makeNodeComponent("goa2"),
    def2: makeNodeComponent("def2"),
    mid2: makeNodeComponent("mid2"),
    str2: makeNodeComponent("str2"),
    textInput: makeNodeComponent("textInput"),
    paginationAll: makeNodeComponent("paginationAll"),
    tabs: makeNodeComponent("tabs"),
    tabItem: makeNodeComponent("tabItem"),
    transferVisibility2: makeNodeComponent("transferVisibility2"),
    showScore2: makeNodeComponent("showScore2"),
    goa3: makeNodeComponent("goa3"),
    def3: makeNodeComponent("def3"),
    mid3: makeNodeComponent("mid3"),
    str3: makeNodeComponent("str3"),
    transferTourVisibility2: makeNodeComponent("transferTourVisibility2"),
    transferTour2: makeNodeComponent("transferTour2"),
    goa4: makeNodeComponent("goa4"),
    def4: makeNodeComponent("def4"),
    mid4: makeNodeComponent("mid4"),
    str4: makeNodeComponent("str4"),
    textInput2: makeNodeComponent("textInput2"),
    paginationAll2: makeNodeComponent("paginationAll2"),

    // Metadata about props expected for PlasmicShowTeam
    internalVariantProps: PlasmicShowTeam__VariantProps,
    internalArgProps: PlasmicShowTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShowTeam;
/* prettier-ignore-end */
