// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: 2LqbY1eBUixE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import SearchComponent from "../../SearchComponent"; // plasmic-import: mmk_GiTXUtux/component
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: 4QnaRcOLXj0D/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: xodLqMOhDs29/component
import MessageCard from "../../MessageCard"; // plasmic-import: KNRpEkS9bXP0/component
import Button from "../../Button"; // plasmic-import: H0AldfR-bP7i/component
import TextInput from "../../TextInput"; // plasmic-import: xwgFLXqL07mD/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button2 from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import OrderBy from "../../OrderBy"; // plasmic-import: LibeNAwKH6sF/component
import PlayerPicker from "../../PlayerPicker"; // plasmic-import: FmVyQ1WB4e_T/component
import { AntdPagination } from "@plasmicpkgs/antd5/skinny/registerPagination";
import { paginationHelpers as AntdPagination_Helpers } from "@plasmicpkgs/antd5/skinny/registerPagination";
import Select from "../../Select"; // plasmic-import: bCMc_ebYmgPo/component
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicEditTeam.module.css"; // plasmic-import: 2LqbY1eBUixE/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: BLgPkmgd4hOv/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 6EplYmkkN57M/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: TfB627kbYt5s/icon
import ChecksvgIcon2 from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon2 from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

createPlasmicElementProxy;

export type PlasmicEditTeam__VariantMembers = {};
export type PlasmicEditTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditTeam__VariantsArgs;
export const PlasmicEditTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicEditTeam__ArgsType = {};
type ArgPropType = keyof PlasmicEditTeam__ArgsType;
export const PlasmicEditTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicEditTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  searchComponent?: Flex__<typeof SearchComponent>;
  columns?: Flex__<"div">;
  stadion?: Flex__<"div">;
  teamInfo?: Flex__<"div">;
  selectFormation?: Flex__<typeof AntdSelect>;
  goa?: Flex__<"div">;
  avatarPlayer?: Flex__<typeof AvatarPlayer>;
  def?: Flex__<"div">;
  avatarPlayer2?: Flex__<typeof AvatarPlayer>;
  mid?: Flex__<"div">;
  avatarPlayer3?: Flex__<typeof AvatarPlayer>;
  str?: Flex__<"div">;
  avatarPlayer4?: Flex__<typeof AvatarPlayer>;
  soccerPlaceMens2?: Flex__<typeof SoccerPlaceMens2>;
  playerList?: Flex__<"div">;
  textInput?: Flex__<typeof TextInput>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabAll?: Flex__<typeof TabButton>;
  tabClub?: Flex__<typeof TabButton>;
  tabPosition?: Flex__<typeof TabButton>;
  tabPrice?: Flex__<typeof TabButton>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  tabAllContent?: Flex__<typeof TabContent>;
  orderByAll?: Flex__<typeof OrderBy>;
  pagination?: Flex__<typeof AntdPagination>;
  tabClubContent?: Flex__<typeof TabContent>;
  selectClub?: Flex__<typeof AntdSelect>;
  pagclubtab?: Flex__<typeof AntdPagination>;
  tabPositionContent?: Flex__<typeof TabContent>;
  select2?: Flex__<typeof Select>;
  pagpostab?: Flex__<typeof AntdPagination>;
  tabPriceContent?: Flex__<typeof TabContent>;
  startPrice?: Flex__<typeof AntdInputNumber>;
  endPrice?: Flex__<typeof AntdInputNumber>;
  price?: Flex__<"div">;
  pagpricetab?: Flex__<typeof AntdPagination>;
};

export interface DefaultEditTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditTeam__RenderFunc(props: {
  variants: PlasmicEditTeam__VariantsArgs;
  args: PlasmicEditTeam__ArgsType;
  overrides: PlasmicEditTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "pagination.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagination.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagination.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagination.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "clubs",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.clubsnameid.data.response;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "userId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return currentUser.customProperties.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "all",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pagclubtab.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagclubtab.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "select2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "DEF"
      },
      {
        path: "pagpostab.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagpostab.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagpostab.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagpostab.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab.currentPage",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1,

        onMutate: generateOnMutateForSpec("currentPage", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab.pageSize",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 6,

        onMutate: generateOnMutateForSpec("pageSize", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab.startIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("startIndex", AntdPagination_Helpers)
      },
      {
        path: "pagpricetab.endIndex",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("endIndex", AntdPagination_Helpers)
      },
      {
        path: "selectClub.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "startPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "endPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => 100
      },
      {
        path: "orderName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "price"
      },
      {
        path: "orderType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "desc"
      },
      {
        path: "playerId",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.teamPlayer.data.response[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 0;
              }
              throw e;
            }
          })()
      },
      {
        path: "updateCapitanVisibility",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "selectFormation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.query.data.response[0].formation;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return 1;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "7fdbe987-bd46-4f70-a2d9-112b3516faeb",
        userArgs: {
          params: [$ctx.params.id, $ctx.params.comp_id, $state.userId]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.7fdbe987-bd46-4f70-a2d9-112b3516faeb.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "193142c4-1d62-4cdb-a0db-ca0b653ef78d",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.193142c4-1d62-4cdb-a0db-ca0b653ef78d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "3a9f74e8-7624-42d9-8d1c-464b195bf62a",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.3a9f74e8-7624-42d9-8d1c-464b195bf62a.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playercount: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "da05eeef-ea8a-4a5b-90fc-d5abd2340b2e",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.da05eeef-ea8a-4a5b-90fc-d5abd2340b2e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "01ec26cc-899b-41da-af62-38e246ff7b6d",
        userArgs: {
          path: [
            $state.pagination.pageSize,
            $state.pagination.startIndex,
            $state.textInput.value,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.01ec26cc-899b-41da-af62-38e246ff7b6d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    clubsnameid: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "e620609e-fb56-417f-a235-3eae35443b9d",
        userArgs: {
          params: [$queries.countryId.data.response[0].country_id]
        },
        cacheKey: `plasmic.$.e620609e-fb56-417f-a235-3eae35443b9d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    countryId: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "f1c7bf22-4390-490f-aa49-4bf897292d0c",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.f1c7bf22-4390-490f-aa49-4bf897292d0c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabsClub: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "741b3e19-7a55-440e-a958-d94afc481e53",
        userArgs: {
          path: [
            $state.selectClub.value,
            $state.pagclubtab.pageSize,
            $state.pagclubtab.startIndex,
            $state.textInput.value,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.741b3e19-7a55-440e-a958-d94afc481e53.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    tabsPos: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "a5638d63-8e32-4c72-be38-bf4f3f421a1a",
        userArgs: {
          path: [
            $state.select2.value,
            $state.pagpostab.pageSize,
            $state.pagpostab.startIndex,
            $state.textInput.value,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.a5638d63-8e32-4c72-be38-bf4f3f421a1a.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    tabPrice: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "87479bca-1fe4-4dce-a0b8-47d2d66114a5",
        userArgs: {
          path: [
            $state.startPrice.value,
            $state.endPrice.value,
            $state.pagpricetab.pageSize,
            $state.pagpricetab.startIndex,
            $state.textInput.value,
            $state.orderName,
            $state.orderType
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.87479bca-1fe4-4dce-a0b8-47d2d66114a5.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    tabsClubAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "7e0767c8-c783-4edb-b116-29f24f51299d",
        userArgs: {
          path: [
            $state.selectClub.value,
            $state.textInput.value,
            $state.orderName
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.7e0767c8-c783-4edb-b116-29f24f51299d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    tabsPosAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "41f6a3a7-ec61-4a73-87ff-fd2ae4001bda",
        userArgs: {
          path: [$state.select2.value, $state.textInput.value],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.41f6a3a7-ec61-4a73-87ff-fd2ae4001bda.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    tabsPriceAll: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "344c4b9d-233e-4ef7-816f-aba7e817b600",
        userArgs: {
          path: [
            $state.startPrice.value,
            $state.endPrice.value,
            $state.textInput.value
          ],
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.344c4b9d-233e-4ef7-816f-aba7e817b600.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    formationList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "049635fd-df37-486e-887f-a744199999bf",
        userArgs: {},
        cacheKey: `plasmic.$.049635fd-df37-486e-887f-a744199999bf.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__zJXxL)}>
            <SearchComponent
              data-plasmic-name={"searchComponent"}
              data-plasmic-override={overrides.searchComponent}
              className={classNames("__wab_instance", sty.searchComponent)}
            />

            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"stadion"}
                data-plasmic-override={overrides.stadion}
                className={classNames(projectcss.all, sty.stadion)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3JtsZ)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"teamInfo"}
                    data-plasmic-override={overrides.teamInfo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.teamInfo)}
                  >
                    <AntdSelect
                      data-plasmic-name={"selectFormation"}
                      data-plasmic-override={overrides.selectFormation}
                      bordered={true}
                      className={classNames(
                        "__wab_instance",
                        sty.selectFormation
                      )}
                      defaultStylesClassName={classNames(
                        projectcss.root_reset,
                        projectcss.plasmic_default_styles,
                        projectcss.plasmic_mixins,
                        projectcss.plasmic_tokens,
                        plasmic_antd_5_hostless_css.plasmic_tokens,
                        plasmic_plasmic_rich_components_css.plasmic_tokens
                      )}
                      defaultValue={(() => {
                        try {
                          return $queries.query.data.response[0].formation;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return 1;
                          }
                          throw e;
                        }
                      })()}
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "selectFormation",
                          "value"
                        ]).apply(null, eventArgs);
                        (async (value, option) => {
                          const $steps = {};

                          $steps["updateFormation"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "b3f3df08-506b-45c3-bd7e-8d901d332e4e",
                                    userArgs: {
                                      params: [
                                        $queries.query.data.response[0].id
                                      ],
                                      body: [$state.selectFormation.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  },
                                  continueOnError: true
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFormation"] != null &&
                            typeof $steps["updateFormation"] === "object" &&
                            typeof $steps["updateFormation"].then === "function"
                          ) {
                            $steps["updateFormation"] = await $steps[
                              "updateFormation"
                            ];
                          }

                          $steps["catchError"] =
                            $steps.updateFormation.message != null
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      "Taktikani almashtirishni iloji yo'q. Mos pozitsiyalarni bo'shating",
                                      undefined,
                                      4,
                                      "top"
                                    ]
                                  };
                                  return $globalActions[
                                    "plasmic-antd5-config-provider.showNotification"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["catchError"] != null &&
                            typeof $steps["catchError"] === "object" &&
                            typeof $steps["catchError"].then === "function"
                          ) {
                            $steps["catchError"] = await $steps["catchError"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $queries.formationList.data.response;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      placeholder={"Select..."}
                      popupScopeClassName={sty["selectFormation__popup"]}
                      showSearch={false}
                      size={"middle"}
                      value={generateStateValueProp($state, [
                        "selectFormation",
                        "value"
                      ])}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l9Km6
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.query.data.response[0].name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sE4SN
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "(" +
                              $queries.teamPlayer.data.response.filter(
                                x => x.player_id != null
                              ).length +
                              "/11)"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Xzpm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "$" + $queries.query.data.response[0].balance
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return $state.updateCapitanVisibility != true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xmoF4
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["clearCapitan"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "da78de66-c9a6-4610-b2dd-5cbdcfc68a2b",
                                    userArgs: {
                                      params: [
                                        $queries.query.data.response[0].id
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["clearCapitan"] != null &&
                            typeof $steps["clearCapitan"] === "object" &&
                            typeof $steps["clearCapitan"].then === "function"
                          ) {
                            $steps["clearCapitan"] = await $steps[
                              "clearCapitan"
                            ];
                          }

                          $steps["httpPatch"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "a66f9bf4-9933-41f8-974b-1f6b6fd937c7",
                                    userArgs: {
                                      params: [
                                        $state.playerId,
                                        $queries.query.data.response[0].id
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["httpPatch"] != null &&
                            typeof $steps["httpPatch"] === "object" &&
                            typeof $steps["httpPatch"].then === "function"
                          ) {
                            $steps["httpPatch"] = await $steps["httpPatch"];
                          }
                        }}
                      >
                        {"Kapitan"}
                      </div>
                    ) : null}
                  </Stack__>
                  <div
                    data-plasmic-name={"goa"}
                    data-plasmic-override={overrides.goa}
                    className={classNames(projectcss.all, sty.goa)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "GOA"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aPb5
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer"}
                            data-plasmic-override={overrides.avatarPlayer}
                            capitanVisibility={(() => {
                              try {
                                return currentItem.is_captain === true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onclickX={async event => {
                              const $steps = {};

                              $steps["httpPatch"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                        opId: "9d39ecd4-53c0-4e25-9aa9-c35381430f4b",
                                        userArgs: {
                                          params: [
                                            currentItem.player_id,
                                            $queries.query.data.response[0].id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpPatch"] != null &&
                                typeof $steps["httpPatch"] === "object" &&
                                typeof $steps["httpPatch"].then === "function"
                              ) {
                                $steps["httpPatch"] = await $steps["httpPatch"];
                              }
                            }}
                            updateCapitan={async event => {
                              const $steps = {};

                              $steps["updatePlayerId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["playerId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePlayerId"] != null &&
                                typeof $steps["updatePlayerId"] === "object" &&
                                typeof $steps["updatePlayerId"].then ===
                                  "function"
                              ) {
                                $steps["updatePlayerId"] = await $steps[
                                  "updatePlayerId"
                                ];
                              }

                              $steps["updateUpdateCapitanVisibility"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "updateCapitanVisibility"
                                        ]
                                      },
                                      operation: 0,
                                      value: currentItem.is_captain
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpdateCapitanVisibility"] !=
                                  null &&
                                typeof $steps[
                                  "updateUpdateCapitanVisibility"
                                ] === "object" &&
                                typeof $steps["updateUpdateCapitanVisibility"]
                                  .then === "function"
                              ) {
                                $steps["updateUpdateCapitanVisibility"] =
                                  await $steps["updateUpdateCapitanVisibility"];
                              }
                            }}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"def"}
                    data-plasmic-override={overrides.def}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.def)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "DEF"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4QjEq
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer2"}
                            data-plasmic-override={overrides.avatarPlayer2}
                            capitanVisibility={(() => {
                              try {
                                return currentItem.is_captain === true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer2
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            onclickX={async event => {
                              const $steps = {};

                              $steps["httpPatch"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                        opId: "4578f2cf-6fc8-47ec-a466-f00cb775bb6d",
                                        userArgs: {
                                          params: [currentItem.id]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpPatch"] != null &&
                                typeof $steps["httpPatch"] === "object" &&
                                typeof $steps["httpPatch"].then === "function"
                              ) {
                                $steps["httpPatch"] = await $steps["httpPatch"];
                              }
                            }}
                            updateCapitan={async event => {
                              const $steps = {};

                              $steps["updatePlayerId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["playerId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePlayerId"] != null &&
                                typeof $steps["updatePlayerId"] === "object" &&
                                typeof $steps["updatePlayerId"].then ===
                                  "function"
                              ) {
                                $steps["updatePlayerId"] = await $steps[
                                  "updatePlayerId"
                                ];
                              }

                              $steps["updateUpdateCapitanVisibility"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "updateCapitanVisibility"
                                        ]
                                      },
                                      operation: 0,
                                      value: currentItem.is_captain
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpdateCapitanVisibility"] !=
                                  null &&
                                typeof $steps[
                                  "updateUpdateCapitanVisibility"
                                ] === "object" &&
                                typeof $steps["updateUpdateCapitanVisibility"]
                                  .then === "function"
                              ) {
                                $steps["updateUpdateCapitanVisibility"] =
                                  await $steps["updateUpdateCapitanVisibility"];
                              }
                            }}
                          />
                        </div>
                      );
                    })}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"mid"}
                    data-plasmic-override={overrides.mid}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.mid)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "MID"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hYu4
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer3"}
                            data-plasmic-override={overrides.avatarPlayer3}
                            capitanVisibility={(() => {
                              try {
                                return currentItem.is_captain === true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer3
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return ``;
                                }
                                throw e;
                              }
                            })()}
                            onclickX={async event => {
                              const $steps = {};

                              $steps["httpPatch"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                        opId: "9d39ecd4-53c0-4e25-9aa9-c35381430f4b",
                                        userArgs: {
                                          params: [
                                            currentItem.player_id,
                                            $queries.query.data.response[0].id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpPatch"] != null &&
                                typeof $steps["httpPatch"] === "object" &&
                                typeof $steps["httpPatch"].then === "function"
                              ) {
                                $steps["httpPatch"] = await $steps["httpPatch"];
                              }
                            }}
                            updateCapitan={async event => {
                              const $steps = {};

                              $steps["updatePlayerId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["playerId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePlayerId"] != null &&
                                typeof $steps["updatePlayerId"] === "object" &&
                                typeof $steps["updatePlayerId"].then ===
                                  "function"
                              ) {
                                $steps["updatePlayerId"] = await $steps[
                                  "updatePlayerId"
                                ];
                              }

                              $steps["updateUpdateCapitanVisibility"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "updateCapitanVisibility"
                                        ]
                                      },
                                      operation: 0,
                                      value: currentItem.is_captain
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpdateCapitanVisibility"] !=
                                  null &&
                                typeof $steps[
                                  "updateUpdateCapitanVisibility"
                                ] === "object" &&
                                typeof $steps["updateUpdateCapitanVisibility"]
                                  .then === "function"
                              ) {
                                $steps["updateUpdateCapitanVisibility"] =
                                  await $steps["updateUpdateCapitanVisibility"];
                              }
                            }}
                          />
                        </div>
                      );
                    })}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"str"}
                    data-plasmic-override={overrides.str}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.str)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "STR"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__we8EE
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer4"}
                            data-plasmic-override={overrides.avatarPlayer4}
                            capitanVisibility={(() => {
                              try {
                                return currentItem.is_captain === true;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return false;
                                }
                                throw e;
                              }
                            })()}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer4
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return ``;
                                }
                                throw e;
                              }
                            })()}
                            onclickX={async event => {
                              const $steps = {};

                              $steps["httpPatch"] = true
                                ? (() => {
                                    const actionArgs = {
                                      dataOp: {
                                        sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                        opId: "323375bb-6eee-440f-8805-ca85b7dc0446",
                                        userArgs: {
                                          params: [
                                            $queries.query.data.response[0].id,
                                            currentItem.player_id
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId:
                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                      }
                                    };
                                    return (async ({
                                      dataOp,
                                      continueOnError
                                    }) => {
                                      try {
                                        const response =
                                          await executePlasmicDataOp(dataOp, {
                                            userAuthToken:
                                              dataSourcesCtx?.userAuthToken,
                                            user: dataSourcesCtx?.user
                                          });
                                        await plasmicInvalidate(
                                          dataOp.invalidatedKeys
                                        );
                                        return response;
                                      } catch (e) {
                                        if (!continueOnError) {
                                          throw e;
                                        }
                                        return e;
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["httpPatch"] != null &&
                                typeof $steps["httpPatch"] === "object" &&
                                typeof $steps["httpPatch"].then === "function"
                              ) {
                                $steps["httpPatch"] = await $steps["httpPatch"];
                              }
                            }}
                            updateCapitan={async event => {
                              const $steps = {};

                              $steps["updatePlayerId"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["playerId"]
                                      },
                                      operation: 0,
                                      value: currentItem.id
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updatePlayerId"] != null &&
                                typeof $steps["updatePlayerId"] === "object" &&
                                typeof $steps["updatePlayerId"].then ===
                                  "function"
                              ) {
                                $steps["updatePlayerId"] = await $steps[
                                  "updatePlayerId"
                                ];
                              }

                              $steps["updateUpdateCapitanVisibility"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "updateCapitanVisibility"
                                        ]
                                      },
                                      operation: 0,
                                      value: currentItem.is_captain
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateUpdateCapitanVisibility"] !=
                                  null &&
                                typeof $steps[
                                  "updateUpdateCapitanVisibility"
                                ] === "object" &&
                                typeof $steps["updateUpdateCapitanVisibility"]
                                  .then === "function"
                              ) {
                                $steps["updateUpdateCapitanVisibility"] =
                                  await $steps["updateUpdateCapitanVisibility"];
                              }
                            }}
                          />
                        </div>
                      );
                    })}
                  </Stack__>
                </div>
                <SoccerPlaceMens2
                  data-plasmic-name={"soccerPlaceMens2"}
                  data-plasmic-override={overrides.soccerPlaceMens2}
                  className={classNames("__wab_instance", sty.soccerPlaceMens2)}
                />
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__qdqiz)}
              >
                <MessageCard
                  className={classNames(
                    "__wab_instance",
                    sty.messageCard__ba79A
                  )}
                  heading={"1ta jamoadan 2tadan ortiq o'yinchi olib bo'lmaydi"}
                  textInfo={"Cheklovni 3tadan 5tagacha oshirish"}
                />

                <MessageCard
                  className={classNames(
                    "__wab_instance",
                    sty.messageCard__ljhfi
                  )}
                  heading={
                    "Sotib olingan o'yinchilar 100dan oshib ketmasligi kerak"
                  }
                  textInfo={"100dan 150ga oshirish"}
                />

                <MessageCard
                  className={classNames(
                    "__wab_instance",
                    sty.messageCard__ii39S
                  )}
                  heading={"Har turda 2tadan ortiq transfer qilib bo'lmaydi"}
                  textInfo={"Transfer sonini oshirish"}
                />

                {(() => {
                  try {
                    return (
                      $queries.teamPlayer.data.response.filter(
                        x => x.player_id != null
                      ).length >= 11
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__lVhQ)}
                    color={"green"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToShowTeam"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: `/showteam/${(() => {
                                try {
                                  return $queries.query.data.response[0]
                                    .competition_id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}/${(() => {
                                try {
                                  return $queries.query.data.response[0].id;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}`
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToShowTeam"] != null &&
                        typeof $steps["goToShowTeam"] === "object" &&
                        typeof $steps["goToShowTeam"].then === "function"
                      ) {
                        $steps["goToShowTeam"] = await $steps["goToShowTeam"];
                      }
                    }}
                  >
                    {"Saqlash"}
                  </Button>
                ) : null}
              </Stack__>
              <div className={classNames(projectcss.all, sty.column__rzO2Y)}>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"playerList"}
                  data-plasmic-override={overrides.playerList}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.playerList)}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    autoFocus={false}
                    className={classNames("__wab_instance", sty.textInput)}
                    color={"dark"}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, ["textInput", "value"])(
                        (e => e.target?.value).apply(null, eventArgs)
                      );
                    }}
                    placeholder={"Ismi bo'yicha izlash"}
                    showStartIcon={true}
                    type={"text"}
                    value={
                      generateStateValueProp($state, ["textInput", "value"]) ??
                      ""
                    }
                  />

                  <TabsContainer
                    data-plasmic-name={"tabsContainer"}
                    data-plasmic-override={overrides.tabsContainer}
                    className={classNames("__wab_instance", sty.tabsContainer)}
                    initialKey={"tab1"}
                    mountMode={"mountLazily"}
                    previewAll={false}
                  >
                    <DataCtxReader__>
                      {$ctx => (
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bwYlu
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__uEab
                            )}
                          >
                            <TabButton
                              data-plasmic-name={"tabAll"}
                              data-plasmic-override={overrides.tabAll}
                              className={classNames(
                                "__wab_instance",
                                sty.tabAll
                              )}
                              tabKey={"tab1"}
                            >
                              <Button2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yo52F
                                  )}
                                >
                                  {"Hammasi"}
                                </div>
                              </Button2>
                            </TabButton>
                            <TabButton
                              data-plasmic-name={"tabClub"}
                              data-plasmic-override={overrides.tabClub}
                              className={classNames(
                                "__wab_instance",
                                sty.tabClub
                              )}
                              tabKey={"tab2"}
                            >
                              <Button2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__chIr
                                  )}
                                >
                                  {"Klub"}
                                </div>
                              </Button2>
                            </TabButton>
                            <TabButton
                              data-plasmic-name={"tabPosition"}
                              data-plasmic-override={overrides.tabPosition}
                              className={classNames(
                                "__wab_instance",
                                sty.tabPosition
                              )}
                              tabKey={"tab3"}
                            >
                              <Button2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ecbBw
                                  )}
                                >
                                  {"Pozitsiya"}
                                </div>
                              </Button2>
                            </TabButton>
                            <TabButton
                              data-plasmic-name={"tabPrice"}
                              data-plasmic-override={overrides.tabPrice}
                              className={classNames(
                                "__wab_instance",
                                sty.tabPrice
                              )}
                              tabKey={"tab4"}
                            >
                              <Button2>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__b23L
                                  )}
                                >
                                  {"Narx"}
                                </div>
                              </Button2>
                            </TabButton>
                            <TabUnderline
                              data-plasmic-name={"tabUnderline"}
                              data-plasmic-override={overrides.tabUnderline}
                              className={classNames(
                                "__wab_instance",
                                sty.tabUnderline
                              )}
                            />
                          </Stack__>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zRgVw
                            )}
                          >
                            <TabContent
                              data-plasmic-name={"tabAllContent"}
                              data-plasmic-override={overrides.tabAllContent}
                              className={classNames(
                                "__wab_instance",
                                sty.tabAllContent
                              )}
                              tabKey={"tab1"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cUkzP
                                )}
                              >
                                <OrderBy
                                  data-plasmic-name={"orderByAll"}
                                  data-plasmic-override={overrides.orderByAll}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.orderByAll
                                  )}
                                  onclickAllPoint={async event => {
                                    const $steps = {};

                                    $steps["updatePrice"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "ochko"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updatePrice"] != null &&
                                      typeof $steps["updatePrice"] ===
                                        "object" &&
                                      typeof $steps["updatePrice"].then ===
                                        "function"
                                    ) {
                                      $steps["updatePrice"] = await $steps[
                                        "updatePrice"
                                      ];
                                    }
                                  }}
                                  onclickPrice={async event => {
                                    const $steps = {};

                                    $steps["updatePoint"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "price"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updatePoint"] != null &&
                                      typeof $steps["updatePoint"] ===
                                        "object" &&
                                      typeof $steps["updatePoint"].then ===
                                        "function"
                                    ) {
                                      $steps["updatePoint"] = await $steps[
                                        "updatePoint"
                                      ];
                                    }
                                  }}
                                  upDown={async val => {
                                    const $steps = {};

                                    $steps["updateOrderType"] =
                                      $state.orderType === "desc"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderType"]
                                              },
                                              operation: 0,
                                              value: "asc"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateOrderType"] != null &&
                                      typeof $steps["updateOrderType"] ===
                                        "object" &&
                                      typeof $steps["updateOrderType"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderType"] = await $steps[
                                        "updateOrderType"
                                      ];
                                    }

                                    $steps["updateOrderType2"] =
                                      $state.orderType === "asc"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderType"]
                                              },
                                              operation: 0,
                                              value: "desc"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateOrderType2"] != null &&
                                      typeof $steps["updateOrderType2"] ===
                                        "object" &&
                                      typeof $steps["updateOrderType2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderType2"] = await $steps[
                                        "updateOrderType2"
                                      ];
                                    }
                                  }}
                                  upDownLink={async event => {
                                    const $steps = {};

                                    $steps["updateOrderType"] =
                                      $state.orderType === "desc"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderType"]
                                              },
                                              operation: 0,
                                              value: "asc"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateOrderType"] != null &&
                                      typeof $steps["updateOrderType"] ===
                                        "object" &&
                                      typeof $steps["updateOrderType"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderType"] = await $steps[
                                        "updateOrderType"
                                      ];
                                    }

                                    $steps["updateOrderType2"] =
                                      $state.orderType === "asc"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["orderType"]
                                              },
                                              operation: 0,
                                              value: "desc"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateOrderType2"] != null &&
                                      typeof $steps["updateOrderType2"] ===
                                        "object" &&
                                      typeof $steps["updateOrderType2"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderType2"] = await $steps[
                                        "updateOrderType2"
                                      ];
                                    }
                                  }}
                                />

                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.tabAll.data.response;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <PlayerPicker
                                      buttonVisibility={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.find(
                                            x => x.player_id === currentItem.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      checkPlayer={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response
                                            .filter(x => x.sold != true)
                                            .find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.playerPicker__nhwaM
                                      )}
                                      clubName={(() => {
                                        try {
                                          return $queries.clubsnameid.data.response.find(
                                            x => x.value === currentItem.club_id
                                          ).label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={currentIndex}
                                      name={(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onclick={async event => {
                                        const $steps = {};

                                        $steps["invokeGlobalAction"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "info",
                                                  (() => {
                                                    try {
                                                      return (
                                                        "Bu futbolchini sotib olish uchun sizga " +
                                                        (currentItem.price +
                                                          $queries.query.data
                                                            .response[0]
                                                            .balance) *
                                                          -1 +
                                                        " tanga kerak"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })(),
                                                  undefined,
                                                  4,
                                                  "top"
                                                ]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                      onclickAvatar={async event => {
                                        const $steps = {};

                                        $steps["invokeGlobalAction"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "info",
                                                  (() => {
                                                    try {
                                                      return "Bitta komandadan maksimum 2ta futbolchi sotib olsa bo'ladi! ";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })(),
                                                  undefined,
                                                  4,
                                                  "top"
                                                ]
                                              };
                                              return $globalActions[
                                                "plasmic-antd5-config-provider.showNotification"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                      onclickMinus={async event => {
                                        const $steps = {};

                                        $steps["sellPlayer"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "323375bb-6eee-440f-8805-ca85b7dc0446",
                                                  userArgs: {
                                                    params: [
                                                      $queries.query.data
                                                        .response[0].id,
                                                      currentItem.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["sellPlayer"] != null &&
                                          typeof $steps["sellPlayer"] ===
                                            "object" &&
                                          typeof $steps["sellPlayer"].then ===
                                            "function"
                                        ) {
                                          $steps["sellPlayer"] = await $steps[
                                            "sellPlayer"
                                          ];
                                        }
                                      }}
                                      onclickPlus={async event => {
                                        const $steps = {};

                                        $steps["updatePlayerFast"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "4a933963-1e52-4384-90b9-aa0c8ed99eb7",
                                                  userArgs: {
                                                    body: [
                                                      currentItem.id,
                                                      currentItem.position,
                                                      $queries.query.data
                                                        .response[0].id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePlayerFast"] != null &&
                                          typeof $steps["updatePlayerFast"] ===
                                            "object" &&
                                          typeof $steps["updatePlayerFast"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePlayerFast"] =
                                            await $steps["updatePlayerFast"];
                                        }

                                        $steps["positionLimit"] =
                                          $steps.updatePlayerFast.data
                                            .response === "Postion is full!!!!"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return "Bu pozitsiyada bo'sh joy yo'q";
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["positionLimit"] != null &&
                                          typeof $steps["positionLimit"] ===
                                            "object" &&
                                          typeof $steps["positionLimit"]
                                            .then === "function"
                                        ) {
                                          $steps["positionLimit"] =
                                            await $steps["positionLimit"];
                                        }
                                      }}
                                      playerClubCount={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.filter(
                                            x =>
                                              x.club_id === currentItem.club_id
                                          ).length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      playerPrice={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      point={(() => {
                                        try {
                                          return currentItem.ochko;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 88;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      position={(() => {
                                        try {
                                          return currentItem.position;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      price={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 9;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      teamBalance={(() => {
                                        try {
                                          return $queries.query.data.response[0]
                                            .balance;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  );
                                })}
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.pagination
                                    ),
                                    current: generateStateValueProp($state, [
                                      "pagination",
                                      "currentPage"
                                    ]),
                                    defaultCurrent: 1,
                                    defaultPageSize: 6,
                                    disabled: false,
                                    hideOnSinglePage: false,
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "currentPage",
                                        ["pagination", "currentPage"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "startIndex",
                                        ["pagination", "startIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "endIndex",
                                        ["pagination", "endIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    onShowSizeChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "pageSize",
                                        ["pagination", "pageSize"],
                                        AntdPagination_Helpers
                                      ),
                                    pageSize: generateStateValueProp($state, [
                                      "pagination",
                                      "pageSize"
                                    ]),
                                    pageSizeOptions: [
                                      { pageSize: 10 },
                                      { pageSize: 20 },
                                      { pageSize: 50 },
                                      { pageSize: 100 }
                                    ],
                                    showLessItems: false,
                                    showQuickJumper: false,
                                    showSizeChanger: false,
                                    simple: false,
                                    size: "default",
                                    total: (() => {
                                      try {
                                        return $queries.playerList.data.response
                                          .length;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 24;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "currentPage",
                                        plasmicStateName:
                                          "pagination.currentPage"
                                      },
                                      {
                                        name: "pageSize",
                                        plasmicStateName: "pagination.pageSize"
                                      },
                                      {
                                        name: "startIndex",
                                        plasmicStateName:
                                          "pagination.startIndex"
                                      },
                                      {
                                        name: "endIndex",
                                        plasmicStateName: "pagination.endIndex"
                                      }
                                    ],
                                    [],
                                    AntdPagination_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdPagination
                                      data-plasmic-name={"pagination"}
                                      data-plasmic-override={
                                        overrides.pagination
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </Stack__>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"tabClubContent"}
                              data-plasmic-override={overrides.tabClubContent}
                              className={classNames(
                                "__wab_instance",
                                sty.tabClubContent
                              )}
                              tabKey={"tab2"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0Vd6E
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__odpu9
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__olJ1V
                                    )}
                                  >
                                    {
                                      "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043b\u0443\u0431\u0430"
                                    }
                                  </div>
                                  <AntdSelect
                                    data-plasmic-name={"selectClub"}
                                    data-plasmic-override={overrides.selectClub}
                                    bordered={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.selectClub
                                    )}
                                    defaultStylesClassName={classNames(
                                      projectcss.root_reset,
                                      projectcss.plasmic_default_styles,
                                      projectcss.plasmic_mixins,
                                      projectcss.plasmic_tokens,
                                      plasmic_antd_5_hostless_css.plasmic_tokens,
                                      plasmic_plasmic_rich_components_css.plasmic_tokens
                                    )}
                                    defaultValue={1}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["selectClub", "value"]
                                    )}
                                    options={(() => {
                                      try {
                                        return $queries.clubsnameid.data
                                          .response;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={"Select..."}
                                    popupScopeClassName={
                                      sty["selectClub__popup"]
                                    }
                                    showSearch={false}
                                    size={"middle"}
                                    value={generateStateValueProp($state, [
                                      "selectClub",
                                      "value"
                                    ])}
                                  />
                                </Stack__>
                                <OrderBy
                                  className={classNames(
                                    "__wab_instance",
                                    sty.orderBy__n3Wf
                                  )}
                                  onclickAllPoint={async event => {
                                    const $steps = {};

                                    $steps["updateOrderName"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "ochko"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOrderName"] != null &&
                                      typeof $steps["updateOrderName"] ===
                                        "object" &&
                                      typeof $steps["updateOrderName"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderName"] = await $steps[
                                        "updateOrderName"
                                      ];
                                    }
                                  }}
                                  onclickPrice={async event => {
                                    const $steps = {};

                                    $steps["updateOrderName"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "price"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOrderName"] != null &&
                                      typeof $steps["updateOrderName"] ===
                                        "object" &&
                                      typeof $steps["updateOrderName"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderName"] = await $steps[
                                        "updateOrderName"
                                      ];
                                    }
                                  }}
                                />

                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.tabsClub.data.response;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <PlayerPicker
                                      buttonVisibility={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.find(
                                            x => x.player_id === currentItem.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      checkPlayer={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response
                                            .filter(x => x.sold != true)
                                            .find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.playerPicker__nM98Y
                                      )}
                                      clubName={(() => {
                                        try {
                                          return $queries.clubsnameid.data.response.find(
                                            x => x.value === currentItem.club_id
                                          ).label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={currentIndex}
                                      name={(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onclickMinus={async event => {
                                        const $steps = {};

                                        $steps["sellPlayer"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "ac8e6943-2d31-4adc-a80e-8b319c6d888a",
                                                  userArgs: {
                                                    params: [
                                                      $queries.query.data
                                                        .response[0].id,
                                                      currentItem.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["sellPlayer"] != null &&
                                          typeof $steps["sellPlayer"] ===
                                            "object" &&
                                          typeof $steps["sellPlayer"].then ===
                                            "function"
                                        ) {
                                          $steps["sellPlayer"] = await $steps[
                                            "sellPlayer"
                                          ];
                                        }
                                      }}
                                      onclickPlus={async event => {
                                        const $steps = {};

                                        $steps["updatePlayerFast"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "4a933963-1e52-4384-90b9-aa0c8ed99eb7",
                                                  userArgs: {
                                                    body: [
                                                      currentItem.id,
                                                      currentItem.position,
                                                      $queries.query.data
                                                        .response[0].id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePlayerFast"] != null &&
                                          typeof $steps["updatePlayerFast"] ===
                                            "object" &&
                                          typeof $steps["updatePlayerFast"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePlayerFast"] =
                                            await $steps["updatePlayerFast"];
                                        }

                                        $steps["invokeGlobalAction"] =
                                          $steps.updatePlayerFast.data
                                            .response === "Postion is full!!!!"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return "Bu pozitsiyada bo'sh joy yo'q";
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }
                                      }}
                                      playerClubCount={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.filter(
                                            x =>
                                              x.club_id === currentItem.club_id
                                          ).length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 4;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      playerPrice={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      point={(() => {
                                        try {
                                          return currentItem.ochko;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 88;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      position={(() => {
                                        try {
                                          return currentItem.position;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      price={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 9;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      teamBalance={(() => {
                                        try {
                                          return $queries.query.data.response[0]
                                            .balance;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 100;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  );
                                })}
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.pagclubtab
                                    ),
                                    current: generateStateValueProp($state, [
                                      "pagclubtab",
                                      "currentPage"
                                    ]),
                                    defaultCurrent: 1,
                                    defaultPageSize: 6,
                                    disabled: false,
                                    hideOnSinglePage: false,
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "currentPage",
                                        ["pagclubtab", "currentPage"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "startIndex",
                                        ["pagclubtab", "startIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "endIndex",
                                        ["pagclubtab", "endIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    onShowSizeChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "pageSize",
                                        ["pagclubtab", "pageSize"],
                                        AntdPagination_Helpers
                                      ),
                                    pageSize: generateStateValueProp($state, [
                                      "pagclubtab",
                                      "pageSize"
                                    ]),
                                    pageSizeOptions: [
                                      { pageSize: 10 },
                                      { pageSize: 20 },
                                      { pageSize: 50 },
                                      { pageSize: 100 }
                                    ],
                                    showLessItems: false,
                                    showQuickJumper: false,
                                    showSizeChanger: false,
                                    simple: false,
                                    size: "default",
                                    total: (() => {
                                      try {
                                        return $queries.tabsClubAll.data
                                          .response.length;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 24;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "currentPage",
                                        plasmicStateName:
                                          "pagclubtab.currentPage"
                                      },
                                      {
                                        name: "pageSize",
                                        plasmicStateName: "pagclubtab.pageSize"
                                      },
                                      {
                                        name: "startIndex",
                                        plasmicStateName:
                                          "pagclubtab.startIndex"
                                      },
                                      {
                                        name: "endIndex",
                                        plasmicStateName: "pagclubtab.endIndex"
                                      }
                                    ],
                                    [],
                                    AntdPagination_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdPagination
                                      data-plasmic-name={"pagclubtab"}
                                      data-plasmic-override={
                                        overrides.pagclubtab
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </Stack__>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"tabPositionContent"}
                              data-plasmic-override={
                                overrides.tabPositionContent
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.tabPositionContent
                              )}
                              tabKey={"tab3"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jrCwV
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__c7Xq
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__b0Rjp
                                    )}
                                  >
                                    {
                                      "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u044e"
                                    }
                                  </div>
                                  <Select
                                    data-plasmic-name={"select2"}
                                    data-plasmic-override={overrides.select2}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.select2
                                    )}
                                    onChange={(...eventArgs) => {
                                      generateStateOnChangeProp($state, [
                                        "select2",
                                        "value"
                                      ])(eventArgs[0]);
                                    }}
                                    options={(() => {
                                      const __composite = [
                                        { value: null, label: null },
                                        { value: null, label: null },
                                        { value: null, label: null },
                                        { value: null, label: null }
                                      ];
                                      __composite["0"]["value"] = "DEF";
                                      __composite["0"]["label"] =
                                        "\u0417\u0410\u0429\u0418\u0422\u041d\u0418\u041a\u0418";
                                      __composite["1"]["value"] = "GOA";
                                      __composite["1"]["label"] =
                                        "\u0412\u0420\u0410\u0422\u0410\u0420\u0418";
                                      __composite["2"]["value"] = "STR";
                                      __composite["2"]["label"] =
                                        "\u041d\u0410\u041f\u0410\u0414\u0410\u042e\u0429\u0418\u0415";
                                      __composite["3"]["value"] = "MID";
                                      __composite["3"]["label"] =
                                        "\u041f\u041e\u041b\u0423\u0417\u0410\u0429\u0418\u0422\u041d\u0418\u041a\u0418";
                                      return __composite;
                                    })()}
                                    value={generateStateValueProp($state, [
                                      "select2",
                                      "value"
                                    ])}
                                  />
                                </div>
                                <OrderBy
                                  className={classNames(
                                    "__wab_instance",
                                    sty.orderBy__h0Adb
                                  )}
                                  onclickAllPoint={async event => {
                                    const $steps = {};

                                    $steps["updateOrderName"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "ochko"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOrderName"] != null &&
                                      typeof $steps["updateOrderName"] ===
                                        "object" &&
                                      typeof $steps["updateOrderName"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderName"] = await $steps[
                                        "updateOrderName"
                                      ];
                                    }
                                  }}
                                  onclickPrice={async event => {
                                    const $steps = {};

                                    $steps["updateOrderName"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["orderName"]
                                            },
                                            operation: 0,
                                            value: "price"
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateOrderName"] != null &&
                                      typeof $steps["updateOrderName"] ===
                                        "object" &&
                                      typeof $steps["updateOrderName"].then ===
                                        "function"
                                    ) {
                                      $steps["updateOrderName"] = await $steps[
                                        "updateOrderName"
                                      ];
                                    }
                                  }}
                                />

                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $queries.tabsPos.data.response;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <PlayerPicker
                                      buttonVisibility={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.find(
                                            x => x.player_id === currentItem.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      checkPlayer={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response
                                            .filter(x => x.sold != true)
                                            .find(
                                              x =>
                                                x.player_id === currentItem.id
                                            );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.playerPicker__q1UHm
                                      )}
                                      clubName={(() => {
                                        try {
                                          return $queries.clubsnameid.data.response.find(
                                            x => x.value === currentItem.club_id
                                          ).label;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      key={currentIndex}
                                      name={(() => {
                                        try {
                                          return currentItem.name;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onclickMinus={async event => {
                                        const $steps = {};

                                        $steps["sellPlayer"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "ac8e6943-2d31-4adc-a80e-8b319c6d888a",
                                                  userArgs: {
                                                    params: [
                                                      $queries.query.data
                                                        .response[0].id,
                                                      currentItem.id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                }
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["sellPlayer"] != null &&
                                          typeof $steps["sellPlayer"] ===
                                            "object" &&
                                          typeof $steps["sellPlayer"].then ===
                                            "function"
                                        ) {
                                          $steps["sellPlayer"] = await $steps[
                                            "sellPlayer"
                                          ];
                                        }
                                      }}
                                      onclickPlus={async event => {
                                        const $steps = {};

                                        $steps["updatePlayerFast"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                dataOp: {
                                                  sourceId:
                                                    "vQtRPuFArSfh43vUmgx2PS",
                                                  opId: "4a933963-1e52-4384-90b9-aa0c8ed99eb7",
                                                  userArgs: {
                                                    body: [
                                                      currentItem.id,
                                                      currentItem.position,
                                                      $queries.query.data
                                                        .response[0].id
                                                    ]
                                                  },
                                                  cacheKey: null,
                                                  invalidatedKeys: [
                                                    "plasmic_refresh_all"
                                                  ],
                                                  roleId:
                                                    "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                },
                                                continueOnError: false
                                              };
                                              return (async ({
                                                dataOp,
                                                continueOnError
                                              }) => {
                                                try {
                                                  const response =
                                                    await executePlasmicDataOp(
                                                      dataOp,
                                                      {
                                                        userAuthToken:
                                                          dataSourcesCtx?.userAuthToken,
                                                        user: dataSourcesCtx?.user
                                                      }
                                                    );
                                                  await plasmicInvalidate(
                                                    dataOp.invalidatedKeys
                                                  );
                                                  return response;
                                                } catch (e) {
                                                  if (!continueOnError) {
                                                    throw e;
                                                  }
                                                  return e;
                                                }
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePlayerFast"] != null &&
                                          typeof $steps["updatePlayerFast"] ===
                                            "object" &&
                                          typeof $steps["updatePlayerFast"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePlayerFast"] =
                                            await $steps["updatePlayerFast"];
                                        }

                                        $steps["showNotification"] =
                                          $steps.updatePlayerFast.data
                                            .response === "Postion is full!!!!"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "info",
                                                    (() => {
                                                      try {
                                                        return "Bu pozitsiyada bo'sh joy yo'q";
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })(),
                                                    undefined,
                                                    undefined,
                                                    "top"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "plasmic-antd5-config-provider.showNotification"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["showNotification"] != null &&
                                          typeof $steps["showNotification"] ===
                                            "object" &&
                                          typeof $steps["showNotification"]
                                            .then === "function"
                                        ) {
                                          $steps["showNotification"] =
                                            await $steps["showNotification"];
                                        }
                                      }}
                                      playerClubCount={(() => {
                                        try {
                                          return $queries.teamPlayer.data.response.filter(
                                            x =>
                                              x.club_id === currentItem.club_id
                                          ).length;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 4;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      playerPrice={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      point={(() => {
                                        try {
                                          return currentItem.ochko;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 88;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      position={(() => {
                                        try {
                                          return currentItem.position;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      price={(() => {
                                        try {
                                          return currentItem.price;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 9;
                                          }
                                          throw e;
                                        }
                                      })()}
                                      teamBalance={(() => {
                                        try {
                                          return $queries.query.data.response[0]
                                            .balance;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return 100;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    />
                                  );
                                })}
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      "__wab_instance",
                                      sty.pagpostab
                                    ),
                                    current: generateStateValueProp($state, [
                                      "pagpostab",
                                      "currentPage"
                                    ]),
                                    defaultCurrent: 1,
                                    defaultPageSize: 6,
                                    disabled: false,
                                    hideOnSinglePage: false,
                                    onChange: async (...eventArgs: any) => {
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "currentPage",
                                        ["pagpostab", "currentPage"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "startIndex",
                                        ["pagpostab", "startIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "endIndex",
                                        ["pagpostab", "endIndex"],
                                        AntdPagination_Helpers
                                      ).apply(null, eventArgs);
                                    },
                                    onShowSizeChange:
                                      generateStateOnChangePropForCodeComponents(
                                        $state,
                                        "pageSize",
                                        ["pagpostab", "pageSize"],
                                        AntdPagination_Helpers
                                      ),
                                    pageSize: generateStateValueProp($state, [
                                      "pagpostab",
                                      "pageSize"
                                    ]),
                                    pageSizeOptions: [
                                      { pageSize: 10 },
                                      { pageSize: 20 },
                                      { pageSize: 50 },
                                      { pageSize: 100 }
                                    ],
                                    showLessItems: false,
                                    showQuickJumper: false,
                                    showSizeChanger: false,
                                    simple: false,
                                    size: "default",
                                    total: (() => {
                                      try {
                                        return $queries.tabsPosAll.data.response
                                          .length;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return 24;
                                        }
                                        throw e;
                                      }
                                    })()
                                  };
                                  initializeCodeComponentStates(
                                    $state,
                                    [
                                      {
                                        name: "currentPage",
                                        plasmicStateName:
                                          "pagpostab.currentPage"
                                      },
                                      {
                                        name: "pageSize",
                                        plasmicStateName: "pagpostab.pageSize"
                                      },
                                      {
                                        name: "startIndex",
                                        plasmicStateName: "pagpostab.startIndex"
                                      },
                                      {
                                        name: "endIndex",
                                        plasmicStateName: "pagpostab.endIndex"
                                      }
                                    ],
                                    [],
                                    AntdPagination_Helpers ?? {},
                                    child$Props
                                  );

                                  return (
                                    <AntdPagination
                                      data-plasmic-name={"pagpostab"}
                                      data-plasmic-override={
                                        overrides.pagpostab
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </Stack__>
                            </TabContent>
                            <TabContent
                              data-plasmic-name={"tabPriceContent"}
                              data-plasmic-override={overrides.tabPriceContent}
                              className={classNames(
                                "__wab_instance",
                                sty.tabPriceContent
                              )}
                              tabKey={"tab4"}
                            >
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__unMHx
                                )}
                              >
                                <Stack__
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dIJmS
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eUsD
                                    )}
                                  >
                                    {
                                      "\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u0446\u0435\u043d\u0443"
                                    }
                                  </div>
                                  <AntdInputNumber
                                    data-plasmic-name={"startPrice"}
                                    data-plasmic-override={overrides.startPrice}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.startPrice
                                    )}
                                    max={1000}
                                    min={0}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["startPrice", "value"]
                                    )}
                                    placeholder={"\u041e\u0442"}
                                    type={"number"}
                                    value={generateStateValueProp($state, [
                                      "startPrice",
                                      "value"
                                    ])}
                                  />

                                  <AntdInputNumber
                                    data-plasmic-name={"endPrice"}
                                    data-plasmic-override={overrides.endPrice}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.endPrice
                                    )}
                                    max={1000}
                                    min={0}
                                    onChange={generateStateOnChangeProp(
                                      $state,
                                      ["endPrice", "value"]
                                    )}
                                    placeholder={"\u0414\u043e"}
                                    type={"number"}
                                    value={generateStateValueProp($state, [
                                      "endPrice",
                                      "value"
                                    ])}
                                  />
                                </Stack__>
                                {(() => {
                                  try {
                                    return (
                                      $queries.tabPrice.data.response?.length >
                                      0
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Stack__
                                    as={"div"}
                                    data-plasmic-name={"price"}
                                    data-plasmic-override={overrides.price}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.price
                                    )}
                                  >
                                    <OrderBy
                                      className={classNames(
                                        "__wab_instance",
                                        sty.orderBy___9Somt
                                      )}
                                      onclickAllPoint={async event => {
                                        const $steps = {};

                                        $steps["updateOrderName"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderName"]
                                                },
                                                operation: 0,
                                                value: "ochko"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateOrderName"] != null &&
                                          typeof $steps["updateOrderName"] ===
                                            "object" &&
                                          typeof $steps["updateOrderName"]
                                            .then === "function"
                                        ) {
                                          $steps["updateOrderName"] =
                                            await $steps["updateOrderName"];
                                        }
                                      }}
                                      onclickPrice={async event => {
                                        const $steps = {};

                                        $steps["updateOrderName"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["orderName"]
                                                },
                                                operation: 0,
                                                value: "price"
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateOrderName"] != null &&
                                          typeof $steps["updateOrderName"] ===
                                            "object" &&
                                          typeof $steps["updateOrderName"]
                                            .then === "function"
                                        ) {
                                          $steps["updateOrderName"] =
                                            await $steps["updateOrderName"];
                                        }
                                      }}
                                    />

                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $queries.tabPrice.data
                                            .response;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <PlayerPicker
                                            buttonVisibility={(() => {
                                              try {
                                                return $queries.teamPlayer.data.response.find(
                                                  x =>
                                                    x.player_id ===
                                                    currentItem.id
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            checkPlayer={(() => {
                                              try {
                                                return $queries.teamPlayer.data.response
                                                  .filter(x => x.sold != true)
                                                  .find(
                                                    x =>
                                                      x.player_id ===
                                                      currentItem.id
                                                  );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            className={classNames(
                                              "__wab_instance",
                                              sty.playerPicker__qOjZ
                                            )}
                                            clubName={(() => {
                                              try {
                                                return $queries.clubsnameid.data.response.find(
                                                  x =>
                                                    x.value ===
                                                    currentItem.club_id
                                                ).label;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            key={currentIndex}
                                            name={(() => {
                                              try {
                                                return currentItem.name;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            onclickMinus={async event => {
                                              const $steps = {};

                                              $steps["sellPlayer"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "vQtRPuFArSfh43vUmgx2PS",
                                                        opId: "ac8e6943-2d31-4adc-a80e-8b319c6d888a",
                                                        userArgs: {
                                                          params: [
                                                            $queries.query.data
                                                              .response[0].id,
                                                            currentItem.id
                                                          ]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: [
                                                          "plasmic_refresh_all"
                                                        ],
                                                        roleId:
                                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["sellPlayer"] != null &&
                                                typeof $steps["sellPlayer"] ===
                                                  "object" &&
                                                typeof $steps["sellPlayer"]
                                                  .then === "function"
                                              ) {
                                                $steps["sellPlayer"] =
                                                  await $steps["sellPlayer"];
                                              }
                                            }}
                                            onclickPlus={async event => {
                                              const $steps = {};

                                              $steps["updatePlayerFast"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      dataOp: {
                                                        sourceId:
                                                          "vQtRPuFArSfh43vUmgx2PS",
                                                        opId: "4a933963-1e52-4384-90b9-aa0c8ed99eb7",
                                                        userArgs: {
                                                          body: [
                                                            currentItem.id,
                                                            currentItem.position,
                                                            $queries.query.data
                                                              .response[0].id
                                                          ]
                                                        },
                                                        cacheKey: null,
                                                        invalidatedKeys: [
                                                          "plasmic_refresh_all"
                                                        ],
                                                        roleId:
                                                          "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                                      }
                                                    };
                                                    return (async ({
                                                      dataOp,
                                                      continueOnError
                                                    }) => {
                                                      try {
                                                        const response =
                                                          await executePlasmicDataOp(
                                                            dataOp,
                                                            {
                                                              userAuthToken:
                                                                dataSourcesCtx?.userAuthToken,
                                                              user: dataSourcesCtx?.user
                                                            }
                                                          );
                                                        await plasmicInvalidate(
                                                          dataOp.invalidatedKeys
                                                        );
                                                        return response;
                                                      } catch (e) {
                                                        if (!continueOnError) {
                                                          throw e;
                                                        }
                                                        return e;
                                                      }
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updatePlayerFast"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updatePlayerFast"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updatePlayerFast"
                                                ].then === "function"
                                              ) {
                                                $steps["updatePlayerFast"] =
                                                  await $steps[
                                                    "updatePlayerFast"
                                                  ];
                                              }

                                              $steps["positionLimit"] =
                                                $steps.updatePlayerFast.data
                                                  .response ===
                                                "Postion is full!!!!"
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "info",
                                                          (() => {
                                                            try {
                                                              return "Bu pozitsiyada bo'sh joy yo'q";
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })(),
                                                          undefined,
                                                          undefined,
                                                          "top"
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "plasmic-antd5-config-provider.showNotification"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["positionLimit"] !=
                                                  null &&
                                                typeof $steps[
                                                  "positionLimit"
                                                ] === "object" &&
                                                typeof $steps["positionLimit"]
                                                  .then === "function"
                                              ) {
                                                $steps["positionLimit"] =
                                                  await $steps["positionLimit"];
                                              }
                                            }}
                                            playerClubCount={(() => {
                                              try {
                                                return $queries.teamPlayer.data.response.filter(
                                                  x =>
                                                    x.club_id ===
                                                    currentItem.club_id
                                                ).length;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 4;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            playerPrice={(() => {
                                              try {
                                                return currentItem.price;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            point={(() => {
                                              try {
                                                return currentItem.ochko;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 88;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            position={(() => {
                                              try {
                                                return currentItem.position;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            price={(() => {
                                              try {
                                                return currentItem.price;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 9;
                                                }
                                                throw e;
                                              }
                                            })()}
                                            teamBalance={(() => {
                                              try {
                                                return $queries.query.data
                                                  .response[0].balance;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return 100;
                                                }
                                                throw e;
                                              }
                                            })()}
                                          />
                                        );
                                      }
                                    )}
                                    {(() => {
                                      const child$Props = {
                                        className: classNames(
                                          "__wab_instance",
                                          sty.pagpricetab
                                        ),
                                        current: generateStateValueProp(
                                          $state,
                                          ["pagpricetab", "currentPage"]
                                        ),
                                        defaultCurrent: 1,
                                        defaultPageSize: 6,
                                        disabled: false,
                                        hideOnSinglePage: false,
                                        onChange: async (...eventArgs: any) => {
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "currentPage",
                                            ["pagpricetab", "currentPage"],
                                            AntdPagination_Helpers
                                          ).apply(null, eventArgs);
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "startIndex",
                                            ["pagpricetab", "startIndex"],
                                            AntdPagination_Helpers
                                          ).apply(null, eventArgs);
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "endIndex",
                                            ["pagpricetab", "endIndex"],
                                            AntdPagination_Helpers
                                          ).apply(null, eventArgs);
                                        },
                                        onShowSizeChange:
                                          generateStateOnChangePropForCodeComponents(
                                            $state,
                                            "pageSize",
                                            ["pagpricetab", "pageSize"],
                                            AntdPagination_Helpers
                                          ),
                                        pageSize: generateStateValueProp(
                                          $state,
                                          ["pagpricetab", "pageSize"]
                                        ),
                                        pageSizeOptions: [
                                          { pageSize: 10 },
                                          { pageSize: 20 },
                                          { pageSize: 50 },
                                          { pageSize: 100 }
                                        ],
                                        showLessItems: false,
                                        showQuickJumper: false,
                                        showSizeChanger: false,
                                        simple: false,
                                        size: "default",
                                        total: (() => {
                                          try {
                                            return $queries.tabsPriceAll.data
                                              .response.length;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return 24;
                                            }
                                            throw e;
                                          }
                                        })()
                                      };
                                      initializeCodeComponentStates(
                                        $state,
                                        [
                                          {
                                            name: "currentPage",
                                            plasmicStateName:
                                              "pagpricetab.currentPage"
                                          },
                                          {
                                            name: "pageSize",
                                            plasmicStateName:
                                              "pagpricetab.pageSize"
                                          },
                                          {
                                            name: "startIndex",
                                            plasmicStateName:
                                              "pagpricetab.startIndex"
                                          },
                                          {
                                            name: "endIndex",
                                            plasmicStateName:
                                              "pagpricetab.endIndex"
                                          }
                                        ],
                                        [],
                                        AntdPagination_Helpers ?? {},
                                        child$Props
                                      );

                                      return (
                                        <AntdPagination
                                          data-plasmic-name={"pagpricetab"}
                                          data-plasmic-override={
                                            overrides.pagpricetab
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </Stack__>
                                ) : null}
                              </Stack__>
                            </TabContent>
                          </Stack__>
                        </Stack__>
                      )}
                    </DataCtxReader__>
                  </TabsContainer>
                </Stack__>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "searchComponent",
    "columns",
    "stadion",
    "teamInfo",
    "selectFormation",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "playerList",
    "textInput",
    "tabsContainer",
    "tabAll",
    "tabClub",
    "tabPosition",
    "tabPrice",
    "tabUnderline",
    "tabAllContent",
    "orderByAll",
    "pagination",
    "tabClubContent",
    "selectClub",
    "pagclubtab",
    "tabPositionContent",
    "select2",
    "pagpostab",
    "tabPriceContent",
    "startPrice",
    "endPrice",
    "price",
    "pagpricetab"
  ],
  navbar: ["navbar"],
  searchComponent: ["searchComponent"],
  columns: [
    "columns",
    "stadion",
    "teamInfo",
    "selectFormation",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "playerList",
    "textInput",
    "tabsContainer",
    "tabAll",
    "tabClub",
    "tabPosition",
    "tabPrice",
    "tabUnderline",
    "tabAllContent",
    "orderByAll",
    "pagination",
    "tabClubContent",
    "selectClub",
    "pagclubtab",
    "tabPositionContent",
    "select2",
    "pagpostab",
    "tabPriceContent",
    "startPrice",
    "endPrice",
    "price",
    "pagpricetab"
  ],
  stadion: [
    "stadion",
    "teamInfo",
    "selectFormation",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2"
  ],
  teamInfo: ["teamInfo", "selectFormation"],
  selectFormation: ["selectFormation"],
  goa: ["goa", "avatarPlayer"],
  avatarPlayer: ["avatarPlayer"],
  def: ["def", "avatarPlayer2"],
  avatarPlayer2: ["avatarPlayer2"],
  mid: ["mid", "avatarPlayer3"],
  avatarPlayer3: ["avatarPlayer3"],
  str: ["str", "avatarPlayer4"],
  avatarPlayer4: ["avatarPlayer4"],
  soccerPlaceMens2: ["soccerPlaceMens2"],
  playerList: [
    "playerList",
    "textInput",
    "tabsContainer",
    "tabAll",
    "tabClub",
    "tabPosition",
    "tabPrice",
    "tabUnderline",
    "tabAllContent",
    "orderByAll",
    "pagination",
    "tabClubContent",
    "selectClub",
    "pagclubtab",
    "tabPositionContent",
    "select2",
    "pagpostab",
    "tabPriceContent",
    "startPrice",
    "endPrice",
    "price",
    "pagpricetab"
  ],
  textInput: ["textInput"],
  tabsContainer: [
    "tabsContainer",
    "tabAll",
    "tabClub",
    "tabPosition",
    "tabPrice",
    "tabUnderline",
    "tabAllContent",
    "orderByAll",
    "pagination",
    "tabClubContent",
    "selectClub",
    "pagclubtab",
    "tabPositionContent",
    "select2",
    "pagpostab",
    "tabPriceContent",
    "startPrice",
    "endPrice",
    "price",
    "pagpricetab"
  ],
  tabAll: ["tabAll"],
  tabClub: ["tabClub"],
  tabPosition: ["tabPosition"],
  tabPrice: ["tabPrice"],
  tabUnderline: ["tabUnderline"],
  tabAllContent: ["tabAllContent", "orderByAll", "pagination"],
  orderByAll: ["orderByAll"],
  pagination: ["pagination"],
  tabClubContent: ["tabClubContent", "selectClub", "pagclubtab"],
  selectClub: ["selectClub"],
  pagclubtab: ["pagclubtab"],
  tabPositionContent: ["tabPositionContent", "select2", "pagpostab"],
  select2: ["select2"],
  pagpostab: ["pagpostab"],
  tabPriceContent: [
    "tabPriceContent",
    "startPrice",
    "endPrice",
    "price",
    "pagpricetab"
  ],
  startPrice: ["startPrice"],
  endPrice: ["endPrice"],
  price: ["price", "pagpricetab"],
  pagpricetab: ["pagpricetab"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  searchComponent: typeof SearchComponent;
  columns: "div";
  stadion: "div";
  teamInfo: "div";
  selectFormation: typeof AntdSelect;
  goa: "div";
  avatarPlayer: typeof AvatarPlayer;
  def: "div";
  avatarPlayer2: typeof AvatarPlayer;
  mid: "div";
  avatarPlayer3: typeof AvatarPlayer;
  str: "div";
  avatarPlayer4: typeof AvatarPlayer;
  soccerPlaceMens2: typeof SoccerPlaceMens2;
  playerList: "div";
  textInput: typeof TextInput;
  tabsContainer: typeof TabsContainer;
  tabAll: typeof TabButton;
  tabClub: typeof TabButton;
  tabPosition: typeof TabButton;
  tabPrice: typeof TabButton;
  tabUnderline: typeof TabUnderline;
  tabAllContent: typeof TabContent;
  orderByAll: typeof OrderBy;
  pagination: typeof AntdPagination;
  tabClubContent: typeof TabContent;
  selectClub: typeof AntdSelect;
  pagclubtab: typeof AntdPagination;
  tabPositionContent: typeof TabContent;
  select2: typeof Select;
  pagpostab: typeof AntdPagination;
  tabPriceContent: typeof TabContent;
  startPrice: typeof AntdInputNumber;
  endPrice: typeof AntdInputNumber;
  price: "div";
  pagpricetab: typeof AntdPagination;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditTeam__VariantsArgs;
    args?: PlasmicEditTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditTeam__ArgProps,
          internalVariantPropNames: PlasmicEditTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditTeam";
  } else {
    func.displayName = `PlasmicEditTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicEditTeam = Object.assign(
  // Top-level PlasmicEditTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    searchComponent: makeNodeComponent("searchComponent"),
    columns: makeNodeComponent("columns"),
    stadion: makeNodeComponent("stadion"),
    teamInfo: makeNodeComponent("teamInfo"),
    selectFormation: makeNodeComponent("selectFormation"),
    goa: makeNodeComponent("goa"),
    avatarPlayer: makeNodeComponent("avatarPlayer"),
    def: makeNodeComponent("def"),
    avatarPlayer2: makeNodeComponent("avatarPlayer2"),
    mid: makeNodeComponent("mid"),
    avatarPlayer3: makeNodeComponent("avatarPlayer3"),
    str: makeNodeComponent("str"),
    avatarPlayer4: makeNodeComponent("avatarPlayer4"),
    soccerPlaceMens2: makeNodeComponent("soccerPlaceMens2"),
    playerList: makeNodeComponent("playerList"),
    textInput: makeNodeComponent("textInput"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabAll: makeNodeComponent("tabAll"),
    tabClub: makeNodeComponent("tabClub"),
    tabPosition: makeNodeComponent("tabPosition"),
    tabPrice: makeNodeComponent("tabPrice"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    tabAllContent: makeNodeComponent("tabAllContent"),
    orderByAll: makeNodeComponent("orderByAll"),
    pagination: makeNodeComponent("pagination"),
    tabClubContent: makeNodeComponent("tabClubContent"),
    selectClub: makeNodeComponent("selectClub"),
    pagclubtab: makeNodeComponent("pagclubtab"),
    tabPositionContent: makeNodeComponent("tabPositionContent"),
    select2: makeNodeComponent("select2"),
    pagpostab: makeNodeComponent("pagpostab"),
    tabPriceContent: makeNodeComponent("tabPriceContent"),
    startPrice: makeNodeComponent("startPrice"),
    endPrice: makeNodeComponent("endPrice"),
    price: makeNodeComponent("price"),
    pagpricetab: makeNodeComponent("pagpricetab"),

    // Metadata about props expected for PlasmicEditTeam
    internalVariantProps: PlasmicEditTeam__VariantProps,
    internalArgProps: PlasmicEditTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditTeam;
/* prettier-ignore-end */
